{
    "docs": [
        {
            "location": "/",
            "text": "What is ReactiveProperty\n\n\nReactiveProperty provides MVVM and asynchronous support features under Reactive Extensions. Target framework is .NET 4.6, UWP, Xamarin.iOS, Xamarin.Android, Xamarin.Mac, Xamarin.Forms and .NET Standard 1.3.\n\n\n\n\nConcept of ReactiveProperty is \nFun programing\n.\nYou can write MVVM pattern program using ReactiveProperty very fun.\n\n\n\n\nFollowing code is tow way binding between ReactiveProperty and plane object property.\n\n\nclass Model : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    private string _name;\n    public string Name\n    {\n        get => _name;\n        set\n        {\n            _name = value;\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Name)));\n        }\n    }\n}\nclass ViewModel\n{\n    private readonly Model _model = new Model();\n    public ReactiveProperty<string> Name { get; }\n    public ViewModel()\n    {\n        // TwoWay synchronize to ReactiveProperty and Model#Name property.\n        Name = _model.ToReactivePropertyAsSynchronized(x => x.Name);\n    }\n}\n\n\n\n\nReactiveProperty is implemented the IObservable<T>. Yes! You can use LINQ.\n\n\nvar name = new ReactiveProperty<string>();\nname.Where(x => x.StartsWith(\"_\")) // filter\n    .Select(x => x.ToUpper()) // convert\n    .Subscribe(x => { ... some action ... });\n\n\n\n\nReactiveProperty is created from IObservable<T>. \n\n\nclass ViewModel\n{\n    public ReactiveProperty<string> Input { get; }\n    public ReactiveProperty<string> Output { get; }\n\n    public ViewModel()\n    {\n        Input = new ReactiveProperty(\"\");\n        Output = Input\n            .Delay(TimeSpan.FromSecond(1)) // Using a Rx method.\n            .Select(x => x.ToUpper()) // Using a LINQ method.\n            .ToReactiveProperty(); // Convert to ReactiveProperty\n    }\n}\n\n\n\n\nThis method chain is very cool.\n\n\nAnd we provide ReactiveCommand class what implements ICommand and IObservable<T> interfaces. ReactiveCommand can create from an IObservable<bool>\n\n\nvar command = Observable.Interval(TimeSpan.FromSecond(1))\n    .Select(x => x % 2 == 0) // convert to IO<bool>\n    .ToReactiveCommand();\ncommand.Subscribe(_ =>\n{\n    // ReactiveCommand invoke an OnNext when Execute method was called.\n});\n\n\n\n\nYou can start the ReactiveProperty from following links.\n\n\n\n\nWindows Presentation Foundation\n\n\nUniversal Windows Platform\n\n\nXamarin.Forms\n\n\n\n\nAnd learn to core features at following links.\n\n\n\n\nReactiveProperty\n\n\nCommanding",
            "title": "What is ReactiveProperty"
        },
        {
            "location": "/#what-is-reactiveproperty",
            "text": "ReactiveProperty provides MVVM and asynchronous support features under Reactive Extensions. Target framework is .NET 4.6, UWP, Xamarin.iOS, Xamarin.Android, Xamarin.Mac, Xamarin.Forms and .NET Standard 1.3.   Concept of ReactiveProperty is  Fun programing .\nYou can write MVVM pattern program using ReactiveProperty very fun.   Following code is tow way binding between ReactiveProperty and plane object property.  class Model : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    private string _name;\n    public string Name\n    {\n        get => _name;\n        set\n        {\n            _name = value;\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Name)));\n        }\n    }\n}\nclass ViewModel\n{\n    private readonly Model _model = new Model();\n    public ReactiveProperty<string> Name { get; }\n    public ViewModel()\n    {\n        // TwoWay synchronize to ReactiveProperty and Model#Name property.\n        Name = _model.ToReactivePropertyAsSynchronized(x => x.Name);\n    }\n}  ReactiveProperty is implemented the IObservable<T>. Yes! You can use LINQ.  var name = new ReactiveProperty<string>();\nname.Where(x => x.StartsWith(\"_\")) // filter\n    .Select(x => x.ToUpper()) // convert\n    .Subscribe(x => { ... some action ... });  ReactiveProperty is created from IObservable<T>.   class ViewModel\n{\n    public ReactiveProperty<string> Input { get; }\n    public ReactiveProperty<string> Output { get; }\n\n    public ViewModel()\n    {\n        Input = new ReactiveProperty(\"\");\n        Output = Input\n            .Delay(TimeSpan.FromSecond(1)) // Using a Rx method.\n            .Select(x => x.ToUpper()) // Using a LINQ method.\n            .ToReactiveProperty(); // Convert to ReactiveProperty\n    }\n}  This method chain is very cool.  And we provide ReactiveCommand class what implements ICommand and IObservable<T> interfaces. ReactiveCommand can create from an IObservable<bool>  var command = Observable.Interval(TimeSpan.FromSecond(1))\n    .Select(x => x % 2 == 0) // convert to IO<bool>\n    .ToReactiveCommand();\ncommand.Subscribe(_ =>\n{\n    // ReactiveCommand invoke an OnNext when Execute method was called.\n});  You can start the ReactiveProperty from following links.   Windows Presentation Foundation  Universal Windows Platform  Xamarin.Forms   And learn to core features at following links.   ReactiveProperty  Commanding",
            "title": "What is ReactiveProperty"
        },
        {
            "location": "/features/Commanding/",
            "text": "Commanding\n\n\nReactiveCommand class implements following two interfaces.\n- ICommand interface\n- IObservable<T>\n\n\nBasic usage\n\n\nThis class can be created using ToReactiveCommand extension method from IObservable<bool> instance.\nWhen IObservable<bool> instance updated, CanExecuteChanged event raise.\n\n\nIf you always want executable command, then you can create ReactiveCommand instance using the default constructor.\n\n\nIObservable<bool> canExecuteSource = ...;\n\nReactiveCommand someCommand = canExecuteSource.ToReactiveCommand(); // non command parameter version.\nReactiveCommand<string> hasCommandParameterCommand = canExecuteSource.ToReactiveCommand<string>(); // has command parameter version\nReactiveCommand alwaysExecutableCommand = new ReactiveCommand(); // non command parameter and always can execute version.\nReactiveCommand<string> alwaysExecutableAndHasCommandParameterCommand = new ReactiveCommand<string>(); // has command parameter and always can execute version.\n\n\n\n\nAnd you can set the initial return value of CanExecute method using factory extension method's initalValue argument.\nThe default value is true.\n\n\nIObservable<bool> canExecuteSource = ...;\n\nReactiveCommand someCommand = canExecuteSource.ToReactiveCommand(false);\nReactiveCommand<string> hasCommandParameterCommand = canExecuteSource.ToReactiveCommand<string>(false);\n\n\n\n\nWhen Execute method is called, ReactiveCommand call the OnNext callback.\nYou can register execute logic using the Subscribe method.\n\n\nReactiveCommand someCommand = new ReactiveCommand();\nsomeCommand.Subscribe(_ => { ... some logic ... }); // set an OnNext callback\n\nsomeCommand.Execute(); // OnNext callback is called.\n\n\n\n\nUsing in ViewModel class\n\n\nThe first example, just use ReactiveCommand class.\n\n\npublic class ViewModel\n{\n    public ReactiveCommand UpdateTimeCommand { get; }\n\n    public ReactiveProperty<string> Time { get; }\n\n    public ViewModel()\n    {\n        Time = new ReactiveProperty<string>();\n        UpdateTimeCommand = new ReactiveCommand();\n        UpdateTimeCommand.Subscribe(_ => Time.Value = DateTime.Now.ToString(\"yyyy/MM/dd HH:mm:ss\"));\n    }\n}\n\n\n\n\nUWP platform example.\n\n\npublic sealed partial class MainPage : Page\n{\n    private ViewModel ViewModel { get; } = new ViewModel();\n    public MainPage()\n    {\n        this.InitializeComponent();\n    }\n}\n\n\n\n\n<Page x:Class=\"App1.MainPage\"\n      xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n      xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n      xmlns:local=\"using:App1\"\n      xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n      xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n      mc:Ignorable=\"d\">\n    <StackPanel Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <Button Content=\"Update the time\"\n                Command=\"{x:Bind ViewModel.UpdateTimeCommand}\"\n                Margin=\"5\" />\n        <TextBlock Text=\"{x:Bind ViewModel.Time.Value, Mode=OneWay}\"\n                   Style=\"{ThemeResource BodyTextBlockStyle}\"\n                   Margin=\"5\" />\n    </StackPanel>\n</Page>\n\n\n\n\n\n\nWork with LINQ\n\n\nReactiveCommand class implements IObservable<T> interface. \nCan use LINQ methods, and ReactiveProperty<T> class can create from IObservable<T>.\nYes, can change the previous example code to below.\n\n\npublic class ViewModel\n{\n    public ReactiveCommand UpdateTimeCommand { get; }\n\n    // Don't need that set Value property. So can change to ReadOnlyReactiveProperty.\n    public ReadOnlyReactiveProperty<string> Time { get; }\n\n    public ViewModel()\n    {\n        UpdateTimeCommand = new ReactiveCommand();\n        Time = UpdateTimeCommand\n            .Select(_ => DateTime.Now.ToString(\"yyyy/MM/dd HH:mm:ss\"))\n            .ToReadOnlyReactiveProperty();\n    }\n}\n\n\n\n\nCreate from IObservable<bool>\n\n\nChange to that the UpdateTimeCommand don't invoke during 5 secs after the command invoked.\n\n\npublic class ViewModel\n{\n    public ReactiveCommand UpdateTimeCommand { get; }\n\n    public ReadOnlyReactiveProperty<string> Time { get; }\n\n    public ViewModel()\n    {\n        var updateTimeTrigger = new Subject<Unit>();\n        UpdateTimeCommand = Observable.Merge(\n            updateTimeTrigger.Select(_ => false),\n            updateTimeTrigger.Delay(TimeSpan.FromSeconds(5)).Select(_ => true))\n            .ToReactiveCommand();\n        Time = UpdateTimeCommand\n            .Select(_ => DateTime.Now.ToString(\"yyyy/MM/dd HH:mm:ss\"))\n            .Do(_ => updateTimeTrigger.OnNext(Unit.Default))\n            .ToReadOnlyReactiveProperty();\n    }\n}\n\n\n\n\n\n\nCreate command and subscribe, in one statement\n\n\nIn the case that doesn't use LINQ methods, can create command and subscribe, in one statement.\nWithSubscribe extension method subscribes and return ReactiveCommand instance, see below.\n\n\npublic class ViewModel\n{\n    public ReactiveCommand UpdateTimeCommand { get; }\n\n    public ReactiveProperty<string> Time { get; }\n\n    public ViewModel()\n    {\n        Time = new ReactiveProperty<string>();\n\n        var updateTimeTrigger = new Subject<Unit>();\n        UpdateTimeCommand = Observable.Merge(\n            updateTimeTrigger.Select(_ => false),\n            updateTimeTrigger.Delay(TimeSpan.FromSeconds(5)).Select(_ => true))\n            .ToReactiveCommand()\n            .WithSubscribe(() => Time.Value = DateTime.Now.ToString(\"yyyy/MM/dd HH:mm:ss\")); // here\n    }\n}\n\n\n\n\nWithSubscribe method is a just shortcut below code.\n\n\n// No use the WithSubscribe\nvar command = new ReactiveCommand();\ncommand.Subscribe(_ => { ... some actions ... });\n\n// Use the WithSubscribe\nvar command = new ReactiveCommand()\n    .WithSubscribe(() => { ... some actions ... });\n\n\n\n\nIf use LINQ methods, then separate statements create an instance and subscribe.\n\n\nUnsubscribe actions\n\n\nIf need that unsubscribes actions, then use Dispose method of IDisposable which Subscribe method returned.\n\n\nvar command = new ReactiveCommand();\nvar subscription1 = command.Subscribe(_ => { ... some actions ... });\nvar subscription2 = command.Subscribe(_ => { ... some actions ... });\n\n// Unsubscribe per Subscribe method.\nsubscription1.Dispose();\nsubscription2.Dispose();\n\n// Unsubscribe all\ncommand.Dispose();\n\n\n\n\nWithSubscribe extension method has override methods which have an IDisposable argument.\n\n\nIDisposable subscription = null;\nvar command = new ReactiveCommand().WithSubscribe(() => { ... some actions ... }, out subscription);\n\n// Unsubscribe\nsubscription.Dispose();\n\n\n\n\nAnd has another override of Action\n argument.\nIt is used together with CompositeDisposable class.\n\n\nvar subscriptions = new CompositeDisposable();\nvar command = new ReactiveCommand()\n    .WithSubscribe(() => { ... some actions ... }, subscriptions.Add)\n    .WithSubscribe(() => { ... some actions ... }, subscriptions.Add);\n\n// Unsubscribe\nsubscription.Dispose();\n\n\n\n\nIn other instance's events subscribe, then you should call the Dispose method of ReactiveCommand class when the end of ViewModel lifecycle.\n\n\nAsync version ReactiveCommand\n\n\nAsyncReactiveCommand class is async version ReactiveCommand class.\nThis class can subscribe async methods, and when executing async method then CanExecute method returns false.\nSo, this class can't re-execute during the async method is proceed.\n\n\nBasic usage\n\n\nNeary the same as a ReactiveCommand class. \nJust difference is that accept async method in Subscribe method argument, and don't implement the IObservable<T> interface.\n\n\npublic class ViewModel\n{\n    public AsyncReactiveCommand HeavyCommand { get; }\n\n    public ReactiveProperty<string> Message { get; } = new ReactiveProperty<string>();\n\n    public ViewModel()\n    {\n        HeavyCommand = new AsyncReactiveCommand()\n            .WithSubscribe(async () =>\n            {\n                Message.Value = \"Heavy command started.\";\n                await Task.Delay(TimeSpan.FromSeconds(5));\n                Message.Value = \"Heavy command finished.\";\n            });\n    }\n}\n\n\n\n\n<Page x:Class=\"App1.MainPage\"\n      xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n      xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n      xmlns:local=\"using:App1\"\n      xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n      xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n      mc:Ignorable=\"d\">\n    <StackPanel Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <Button Content=\"Heavy command\"\n                Command=\"{x:Bind ViewModel.HeavyCommand}\"\n                Margin=\"5\" />\n        <TextBlock Text=\"{x:Bind ViewModel.Message.Value, Mode=OneWay}\"\n                   Margin=\"5\" />\n    </StackPanel>\n</Page>\n\n\n\n\n\n\nOf cause, AsyncReactiveCommand is created from IObservable<bool>.\n\n\npublic class ViewModel\n{\n    public AsyncReactiveCommand HeavyCommand { get; }\n\n    public ReactiveProperty<string> Message { get; } = new ReactiveProperty<string>();\n\n    public ViewModel()\n    {\n        HeavyCommand = Observable.Interval(TimeSpan.FromSeconds(1))\n            .Select(x => x % 2 == 0)\n            .ToAsyncReactiveCommand()\n            .WithSubscribe(async () =>\n            {\n                Message.Value = \"Heavy command started.\";\n                await Task.Delay(TimeSpan.FromSeconds(5));\n                Message.Value = \"Heavy command finished.\";\n            });\n    }\n}\n\n\n\n\n\n\nAnd AsyncReactiveCommand implements the IDisposable interface.\nYou should call the Dispose method when the another instance's event subscribe.\n\n\nShare CanExecute state\n\n\nSometimes want only one of an async method is executing in a page.\nIn this case, can share CanExecute state between AsyncReactiveCommand instances.\nWhen created from a same ReactiveProperty<bool> instance, then synchronize CanExecute state.\n\n\npublic class ViewModel\n{\n    private ReactiveProperty<bool> HeavyCommandCanExecuteState { get; } = new ReactiveProperty<bool>(true);\n    public AsyncReactiveCommand HeavyCommand1 { get; }\n    public AsyncReactiveCommand HeavyCommand2 { get; }\n\n    public ReactiveProperty<string> Message { get; } = new ReactiveProperty<string>();\n\n    public ViewModel()\n    {\n        HeavyCommand1 = HeavyCommandCanExecuteState\n            .ToAsyncReactiveCommand()\n            .WithSubscribe(async () =>\n            {\n                Message.Value = \"Heavy command 1 started.\";\n                await Task.Delay(TimeSpan.FromSeconds(5));\n                Message.Value = \"Heavy command 1 finished.\";\n            });\n        HeavyCommand2 = HeavyCommandCanExecuteState\n            .ToAsyncReactiveCommand()\n            .WithSubscribe(async () =>\n            {\n                Message.Value = \"Heavy command 2 started.\";\n                await Task.Delay(TimeSpan.FromSeconds(5));\n                Message.Value = \"Heavy command 2 finished.\";\n            });\n    }\n}\n\n\n\n\n<Page x:Class=\"App1.MainPage\"\n      xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n      xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n      xmlns:local=\"using:App1\"\n      xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n      xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n      mc:Ignorable=\"d\">\n    <StackPanel Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <Button Content=\"Heavy command 1\"\n                Command=\"{x:Bind ViewModel.HeavyCommand1}\"\n                Margin=\"5\" />\n        <Button Content=\"Heavy command 2\"\n                Command=\"{x:Bind ViewModel.HeavyCommand2}\"\n                Margin=\"5\" />\n        <TextBlock Text=\"{x:Bind ViewModel.Message.Value, Mode=OneWay}\"\n                   Margin=\"5\" />\n    </StackPanel>\n</Page>",
            "title": "Commanding"
        },
        {
            "location": "/features/Commanding/#commanding",
            "text": "ReactiveCommand class implements following two interfaces.\n- ICommand interface\n- IObservable<T>",
            "title": "Commanding"
        },
        {
            "location": "/features/Commanding/#basic-usage",
            "text": "This class can be created using ToReactiveCommand extension method from IObservable<bool> instance.\nWhen IObservable<bool> instance updated, CanExecuteChanged event raise.  If you always want executable command, then you can create ReactiveCommand instance using the default constructor.  IObservable<bool> canExecuteSource = ...;\n\nReactiveCommand someCommand = canExecuteSource.ToReactiveCommand(); // non command parameter version.\nReactiveCommand<string> hasCommandParameterCommand = canExecuteSource.ToReactiveCommand<string>(); // has command parameter version\nReactiveCommand alwaysExecutableCommand = new ReactiveCommand(); // non command parameter and always can execute version.\nReactiveCommand<string> alwaysExecutableAndHasCommandParameterCommand = new ReactiveCommand<string>(); // has command parameter and always can execute version.  And you can set the initial return value of CanExecute method using factory extension method's initalValue argument.\nThe default value is true.  IObservable<bool> canExecuteSource = ...;\n\nReactiveCommand someCommand = canExecuteSource.ToReactiveCommand(false);\nReactiveCommand<string> hasCommandParameterCommand = canExecuteSource.ToReactiveCommand<string>(false);  When Execute method is called, ReactiveCommand call the OnNext callback.\nYou can register execute logic using the Subscribe method.  ReactiveCommand someCommand = new ReactiveCommand();\nsomeCommand.Subscribe(_ => { ... some logic ... }); // set an OnNext callback\n\nsomeCommand.Execute(); // OnNext callback is called.",
            "title": "Basic usage"
        },
        {
            "location": "/features/Commanding/#using-in-viewmodel-class",
            "text": "The first example, just use ReactiveCommand class.  public class ViewModel\n{\n    public ReactiveCommand UpdateTimeCommand { get; }\n\n    public ReactiveProperty<string> Time { get; }\n\n    public ViewModel()\n    {\n        Time = new ReactiveProperty<string>();\n        UpdateTimeCommand = new ReactiveCommand();\n        UpdateTimeCommand.Subscribe(_ => Time.Value = DateTime.Now.ToString(\"yyyy/MM/dd HH:mm:ss\"));\n    }\n}  UWP platform example.  public sealed partial class MainPage : Page\n{\n    private ViewModel ViewModel { get; } = new ViewModel();\n    public MainPage()\n    {\n        this.InitializeComponent();\n    }\n}  <Page x:Class=\"App1.MainPage\"\n      xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n      xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n      xmlns:local=\"using:App1\"\n      xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n      xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n      mc:Ignorable=\"d\">\n    <StackPanel Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <Button Content=\"Update the time\"\n                Command=\"{x:Bind ViewModel.UpdateTimeCommand}\"\n                Margin=\"5\" />\n        <TextBlock Text=\"{x:Bind ViewModel.Time.Value, Mode=OneWay}\"\n                   Style=\"{ThemeResource BodyTextBlockStyle}\"\n                   Margin=\"5\" />\n    </StackPanel>\n</Page>",
            "title": "Using in ViewModel class"
        },
        {
            "location": "/features/Commanding/#work-with-linq",
            "text": "ReactiveCommand class implements IObservable<T> interface. \nCan use LINQ methods, and ReactiveProperty<T> class can create from IObservable<T>.\nYes, can change the previous example code to below.  public class ViewModel\n{\n    public ReactiveCommand UpdateTimeCommand { get; }\n\n    // Don't need that set Value property. So can change to ReadOnlyReactiveProperty.\n    public ReadOnlyReactiveProperty<string> Time { get; }\n\n    public ViewModel()\n    {\n        UpdateTimeCommand = new ReactiveCommand();\n        Time = UpdateTimeCommand\n            .Select(_ => DateTime.Now.ToString(\"yyyy/MM/dd HH:mm:ss\"))\n            .ToReadOnlyReactiveProperty();\n    }\n}",
            "title": "Work with LINQ"
        },
        {
            "location": "/features/Commanding/#create-from-iobservablebool",
            "text": "Change to that the UpdateTimeCommand don't invoke during 5 secs after the command invoked.  public class ViewModel\n{\n    public ReactiveCommand UpdateTimeCommand { get; }\n\n    public ReadOnlyReactiveProperty<string> Time { get; }\n\n    public ViewModel()\n    {\n        var updateTimeTrigger = new Subject<Unit>();\n        UpdateTimeCommand = Observable.Merge(\n            updateTimeTrigger.Select(_ => false),\n            updateTimeTrigger.Delay(TimeSpan.FromSeconds(5)).Select(_ => true))\n            .ToReactiveCommand();\n        Time = UpdateTimeCommand\n            .Select(_ => DateTime.Now.ToString(\"yyyy/MM/dd HH:mm:ss\"))\n            .Do(_ => updateTimeTrigger.OnNext(Unit.Default))\n            .ToReadOnlyReactiveProperty();\n    }\n}",
            "title": "Create from IObservable&lt;bool&gt;"
        },
        {
            "location": "/features/Commanding/#create-command-and-subscribe-in-one-statement",
            "text": "In the case that doesn't use LINQ methods, can create command and subscribe, in one statement.\nWithSubscribe extension method subscribes and return ReactiveCommand instance, see below.  public class ViewModel\n{\n    public ReactiveCommand UpdateTimeCommand { get; }\n\n    public ReactiveProperty<string> Time { get; }\n\n    public ViewModel()\n    {\n        Time = new ReactiveProperty<string>();\n\n        var updateTimeTrigger = new Subject<Unit>();\n        UpdateTimeCommand = Observable.Merge(\n            updateTimeTrigger.Select(_ => false),\n            updateTimeTrigger.Delay(TimeSpan.FromSeconds(5)).Select(_ => true))\n            .ToReactiveCommand()\n            .WithSubscribe(() => Time.Value = DateTime.Now.ToString(\"yyyy/MM/dd HH:mm:ss\")); // here\n    }\n}  WithSubscribe method is a just shortcut below code.  // No use the WithSubscribe\nvar command = new ReactiveCommand();\ncommand.Subscribe(_ => { ... some actions ... });\n\n// Use the WithSubscribe\nvar command = new ReactiveCommand()\n    .WithSubscribe(() => { ... some actions ... });  If use LINQ methods, then separate statements create an instance and subscribe.",
            "title": "Create command and subscribe, in one statement"
        },
        {
            "location": "/features/Commanding/#unsubscribe-actions",
            "text": "If need that unsubscribes actions, then use Dispose method of IDisposable which Subscribe method returned.  var command = new ReactiveCommand();\nvar subscription1 = command.Subscribe(_ => { ... some actions ... });\nvar subscription2 = command.Subscribe(_ => { ... some actions ... });\n\n// Unsubscribe per Subscribe method.\nsubscription1.Dispose();\nsubscription2.Dispose();\n\n// Unsubscribe all\ncommand.Dispose();  WithSubscribe extension method has override methods which have an IDisposable argument.  IDisposable subscription = null;\nvar command = new ReactiveCommand().WithSubscribe(() => { ... some actions ... }, out subscription);\n\n// Unsubscribe\nsubscription.Dispose();  And has another override of Action  argument.\nIt is used together with CompositeDisposable class.  var subscriptions = new CompositeDisposable();\nvar command = new ReactiveCommand()\n    .WithSubscribe(() => { ... some actions ... }, subscriptions.Add)\n    .WithSubscribe(() => { ... some actions ... }, subscriptions.Add);\n\n// Unsubscribe\nsubscription.Dispose();  In other instance's events subscribe, then you should call the Dispose method of ReactiveCommand class when the end of ViewModel lifecycle.",
            "title": "Unsubscribe actions"
        },
        {
            "location": "/features/Commanding/#async-version-reactivecommand",
            "text": "AsyncReactiveCommand class is async version ReactiveCommand class.\nThis class can subscribe async methods, and when executing async method then CanExecute method returns false.\nSo, this class can't re-execute during the async method is proceed.",
            "title": "Async version ReactiveCommand"
        },
        {
            "location": "/features/Commanding/#basic-usage_1",
            "text": "Neary the same as a ReactiveCommand class. \nJust difference is that accept async method in Subscribe method argument, and don't implement the IObservable<T> interface.  public class ViewModel\n{\n    public AsyncReactiveCommand HeavyCommand { get; }\n\n    public ReactiveProperty<string> Message { get; } = new ReactiveProperty<string>();\n\n    public ViewModel()\n    {\n        HeavyCommand = new AsyncReactiveCommand()\n            .WithSubscribe(async () =>\n            {\n                Message.Value = \"Heavy command started.\";\n                await Task.Delay(TimeSpan.FromSeconds(5));\n                Message.Value = \"Heavy command finished.\";\n            });\n    }\n}  <Page x:Class=\"App1.MainPage\"\n      xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n      xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n      xmlns:local=\"using:App1\"\n      xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n      xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n      mc:Ignorable=\"d\">\n    <StackPanel Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <Button Content=\"Heavy command\"\n                Command=\"{x:Bind ViewModel.HeavyCommand}\"\n                Margin=\"5\" />\n        <TextBlock Text=\"{x:Bind ViewModel.Message.Value, Mode=OneWay}\"\n                   Margin=\"5\" />\n    </StackPanel>\n</Page>   Of cause, AsyncReactiveCommand is created from IObservable<bool>.  public class ViewModel\n{\n    public AsyncReactiveCommand HeavyCommand { get; }\n\n    public ReactiveProperty<string> Message { get; } = new ReactiveProperty<string>();\n\n    public ViewModel()\n    {\n        HeavyCommand = Observable.Interval(TimeSpan.FromSeconds(1))\n            .Select(x => x % 2 == 0)\n            .ToAsyncReactiveCommand()\n            .WithSubscribe(async () =>\n            {\n                Message.Value = \"Heavy command started.\";\n                await Task.Delay(TimeSpan.FromSeconds(5));\n                Message.Value = \"Heavy command finished.\";\n            });\n    }\n}   And AsyncReactiveCommand implements the IDisposable interface.\nYou should call the Dispose method when the another instance's event subscribe.",
            "title": "Basic usage"
        },
        {
            "location": "/features/Commanding/#share-canexecute-state",
            "text": "Sometimes want only one of an async method is executing in a page.\nIn this case, can share CanExecute state between AsyncReactiveCommand instances.\nWhen created from a same ReactiveProperty<bool> instance, then synchronize CanExecute state.  public class ViewModel\n{\n    private ReactiveProperty<bool> HeavyCommandCanExecuteState { get; } = new ReactiveProperty<bool>(true);\n    public AsyncReactiveCommand HeavyCommand1 { get; }\n    public AsyncReactiveCommand HeavyCommand2 { get; }\n\n    public ReactiveProperty<string> Message { get; } = new ReactiveProperty<string>();\n\n    public ViewModel()\n    {\n        HeavyCommand1 = HeavyCommandCanExecuteState\n            .ToAsyncReactiveCommand()\n            .WithSubscribe(async () =>\n            {\n                Message.Value = \"Heavy command 1 started.\";\n                await Task.Delay(TimeSpan.FromSeconds(5));\n                Message.Value = \"Heavy command 1 finished.\";\n            });\n        HeavyCommand2 = HeavyCommandCanExecuteState\n            .ToAsyncReactiveCommand()\n            .WithSubscribe(async () =>\n            {\n                Message.Value = \"Heavy command 2 started.\";\n                await Task.Delay(TimeSpan.FromSeconds(5));\n                Message.Value = \"Heavy command 2 finished.\";\n            });\n    }\n}  <Page x:Class=\"App1.MainPage\"\n      xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n      xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n      xmlns:local=\"using:App1\"\n      xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n      xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n      mc:Ignorable=\"d\">\n    <StackPanel Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <Button Content=\"Heavy command 1\"\n                Command=\"{x:Bind ViewModel.HeavyCommand1}\"\n                Margin=\"5\" />\n        <Button Content=\"Heavy command 2\"\n                Command=\"{x:Bind ViewModel.HeavyCommand2}\"\n                Margin=\"5\" />\n        <TextBlock Text=\"{x:Bind ViewModel.Message.Value, Mode=OneWay}\"\n                   Margin=\"5\" />\n    </StackPanel>\n</Page>",
            "title": "Share CanExecute state"
        },
        {
            "location": "/features/ReactiveProperty/",
            "text": "ReactiveProperty\n\n\nReactiveProperty is core class of this library.\nThis has following features.\n\n\n\n\nImplements the INotifyPropretyChanged interface.\n\n\nThe value property raise the PropertyChanged event.\n\n\n\n\n\n\nImplements the IObservable<T> interface.\n\n\n\n\nYes, The value property can bind to XAML control's property.\nAnd the class call the IObserver<T>#OnNext method when set the value.\n\n\nA sample code is below.\n\n\nusing Reactive.Bindings;\nusing System;\n\nnamespace ReactivePropertyEduApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // create from defualt constructor(default value is null)\n            var name = new ReactiveProperty<string>();\n            // setup the event handler and the onNext callback.\n            name.PropertyChanged += (_, e) => Console.WriteLine($\"PropertyChanged: {e.PropertyName}\");\n            name.Subscribe(x => Console.WriteLine($\"OnNext: {x}\"));\n\n            // update the value property.\n            name.Value = \"neuecc\";\n            name.Value = \"xin9le\";\n            name.Value = \"okazuki\";\n        }\n    }\n}\n\n\n\n\nThe output of this program is below.\n\n\nOnNext:\nOnNext: neuecc\nPropertyChanged: Value\nOnNext: xin9le\nPropertyChanged: Value\nOnNext: okazuki\nPropertyChanged: Value\n\n\n\n\nWhat's deferent between PropertyChanged and onNext callback?\nThe onNext is called when subscribe. The PropertyChanged isn't called when added the event handler. And the onNext callback's argument is the property value, the PropertyChanged argument don't have the property value.\n\n\nThe PropertyChanged event was provided for data binding. In the normal case, you should use Reactive Extensions methods.\n\n\nUse with XAML platform\n\n\nThe ReactiveProperty class is designed for XAML platform which is like WPF, UWP, and Xamarin.Forms.\nThis class can be used a ViewModel layer. \n\n\nIn the case that don't use the ReactiveProperty, a ViewModel class wrote below. \n\n\npublic class MainPageViewModel : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    private string _name;\n    public string Name\n    {\n        get => _name;\n        set\n        {\n            _name = value;\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Name)));\n        }\n    }\n\n    // Other properties are defined similar codes.\n}\n\n\n\n\nAnd those properties binds in the XAML code.\n\n\n<!-- In the WPF -->\n<TextBox Text=\"{Binding Name}\" />\n\n<!-- In the UWP(Runtime data binding) -->\n<TextBox Text=\"{Binding Name}\" />\n\n<!-- In the UWP(Compile time data binding) -->\n<TextBox Text=\"{x:Bind ViewModel.Name, Mode=TwoWay}\" />\n\n<!-- In the Xamarin.Forms -->\n<Entry Text=\"{Binding Name}\" />\n\n\n\n\nIn the case that uses the ReactiveProperty, a ViewModel code becomes very simple!\n\n\n// The INotifyPropertyChanged interface must implement when using the WPF.\n// Because, if you don't implement this, then memory leak occurred.\npublic class MainPageViewModel\n{\n    public ReactiveProperty<string> Name { get; } = new ReactiveProperty<string>();\n\n    // Other properties are defined similar codes.\n}\n\n\n\n\nWhen binding in the XAML code, you must add the \n.Value\n in binding path.\nThis is an only limitation of this library.\n\n\n<!-- In the WPF -->\n<TextBox Text=\"{Binding Name.Value}\" />\n\n<!-- In the UWP(Runtime data binding) -->\n<TextBox Text=\"{Binding Name}.Value\" />\n\n<!-- In the UWP(Compile time data binding) -->\n<TextBox Text=\"{x:Bind ViewModel.Name.Value, Mode=TwoWay}\" />\n\n<!-- In the Xamarin.Forms -->\n<Entry Text=\"{Binding Name.Value}\" />\n\n\n\n\n\n\nWe forget the \n.Value\n sometimes. If you have a ReSharper license, then you can use this plugin.\n\nReactiveProperty XAML Binding Corrector\n\nHighlight the missing of ReactiveProperty \".Value\" in XAML.\n\n\n\n\nHow to create a ReactiveProperty instance\n\n\nThe ReactiveProperty class can create from many methods.\n\n\nCreate from the constructor\n\n\nThe simplest way is that using constructor.\n\n\n// create with the default value.\nvar name = new ReactiveProperty<string>();\nConsole.WriteLine(name.Value); // -> empty output\n\n// create with the initial value.\nvar name = new ReactiveProperty<string>(\"okazuki\");\nConsole.WriteLine(name.Value); // -> okazuki\n\n\n\n\nCreate from IObservable<T>\n\n\nThis can create from IObservable<T>.\nJust calls \nToReactiveProperty\n method.\n\n\nIObservable<long> observableInstance = Observable.Interval(TimeSpan.FromSeconds(1));\n\n// Convert to ReactiveProperty from IObservable.\nReactiveProperty<long> counter = observableInstance.ToReactiveProperty();\n\n\n\n\nCreate from ReactiveProperty\n\n\nThe ReactiveProperty implements IObservable interface.\nIt means that ReactiveProperty can be created from ReactiveProperty.\n\n\nvar name = new ReactiveProperty<string>(\"\");\n\nvar formalName = name.Select(x => $\"Dear {x}\")\n    .ToReactiveProperty();\n\n\n\n\nAll IObservable instances can become ReactiveProperty. \n\n\nValidation\n\n\nThe ReactiveProperty class implements INotifyDataErrorInfo interface.\n\n\nSet custom validation logics\n\n\nYou can set custom validation logic using the SetValidateNotifyError method.\n\n\nvar name = new ReactiveProperty<string>()\n    .SetValidateNotifyError(x => string.IsNullOrWhiteSpace(x) ? \"Error message\" : null);\n\n\n\n\nIn the correct value case, validation logic should return null.\nIn invalid value case, logic should return an error message.\n\n\nWork with DataAnnotations\n\n\nThis class can work together with the DataAnnotations.\nYou can set validation attribute using the SetValidateAttribute method.\n\n\nclass ViewModel\n{\n    // Set validation attributes\n    [Required(ErrorMessage = \"The name is required.\")]\n    [StringLength(100, ErrorMessage = \"The name length should be lower than 30.\")]\n    public ReactiveProperty<string> Name { get; }\n\n    public ViewModel()\n    {\n        Name = new ReactiveProperty<string>()\n            // Set validation attributes into the ReactiveProperty.\n            .SetValidateAttribute(() => Name);\n    }\n}\n\n\n\n\nWPF is integrated INotifyDataErrorInfo interface. See below.\n\n\n\n\nHandling validation errors\n\n\nAnother platform can't display error messages from the INofityDataErrorInfo interface.\nReactiveProperty class have some properties for handling validation errors.\n\n\nA first property is \nObserveErrorChanged\n.\nThis type is \nIObservable<IEnumerable>\n. You can convert to an error message from IEnumerable. See below.\n\n\nclass ViewModel\n{\n    // Set validation attributes\n    [Required(ErrorMessage = \"The name is required.\")]\n    [StringLength(100, ErrorMessage = \"The name length should be lower than 30.\")]\n    public ReactiveProperty<string> Name { get; }\n\n    public ReactiveProperty<string> NameErrorMessage { get; }\n\n    public ViewModel()\n    {\n        Name = new ReactiveProperty<string>()\n            // Set validation attributes into the ReactiveProperty.\n            .SetValidateAttribute(() => Name);\n\n        // Handling an error message\n        NameErrorMessage = Name.ObserveErrorChanged\n            .Select(x => x?.OfType<string>()?.FirstOrDefault())\n            .ToReactiveProperty();\n    }\n}\n\n\n\n\nBind \nNameErrorMessage.Value\n property to a text control. An error message can be displayed.\n\n\nIn the case of UWP, see below.\n\n\npublic sealed partial class MainPage : Page\n{\n    private ViewModel ViewModel { get; } = new ViewModel();\n    public MainPage()\n    {\n        this.InitializeComponent();\n    }\n}\n\n\n\n\n<Page x:Class=\"App1.MainPage\"\n      xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n      xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n      xmlns:local=\"using:App1\"\n      xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n      xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n      mc:Ignorable=\"d\">\n    <StackPanel Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <TextBlock Text=\"Name\"\n                   Style=\"{ThemeResource CaptionTextBlockStyle}\" />\n        <TextBox Text=\"{x:Bind ViewModel.Name.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}\"\n                 Margin=\"5\" />\n        <TextBlock Text=\"{x:Bind ViewModel.NameErrorMessage.Value, Mode=OneWay}\"\n                   Foreground=\"Red\"\n                   Margin=\"5,0\"\n                   Style=\"{ThemeResource BodyTextBlockStyle}\" />\n    </StackPanel>\n</Page>\n\n\n\n\n\n\nNext property is \nObserveHasErrors\n. \nObserveHasErrors\n property type is \nIObservable<bool>\n.\nIn popular input form case, combine \nObserveHasErrors\n property values very useful.\n\n\nThis sample program is that create HasErros property that type is ReactiveProperty<bool> that combine two ReactiveProperty's ObserveHasErrors properties.\n\n\npublic class ViewModel\n{\n    // Set validation attributes\n    [Required(ErrorMessage = \"The name is required.\")]\n    [StringLength(100, ErrorMessage = \"The name length should be lower than 30.\")]\n    public ReactiveProperty<string> Name { get; }\n\n    [Required(ErrorMessage = \"The memo is required.\")]\n    public ReactiveProperty<string> Memo { get; }\n\n    public ReactiveProperty<bool> HasErrors { get; }\n\n    public ViewModel()\n    {\n        Name = new ReactiveProperty<string>()\n            .SetValidateAttribute(() => Name);\n\n        Memo = new ReactiveProperty<string>()\n            .SetValidateAttribute(() => Memo);\n\n        // You can combine some ObserveHasErrors values.\n        HasErrors = new[]\n            {\n                Name.ObserveHasErrors,\n                Memo.ObserveHasErrors,\n            }.CombineLatest(x => x.Any(y => y))\n            .ToReactiveProperty();\n    }\n}\n\n\n\n\n<Page x:Class=\"App1.MainPage\"\n      xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n      xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n      xmlns:local=\"using:App1\"\n      xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n      xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n      mc:Ignorable=\"d\">\n    <StackPanel Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <TextBlock Text=\"Name\"\n                   Style=\"{ThemeResource CaptionTextBlockStyle}\" \n                   Margin=\"5\" />\n        <TextBox Text=\"{x:Bind ViewModel.Name.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}\"\n                 Margin=\"5\" />\n        <TextBlock Text=\"Memo\"\n                   Style=\"{ThemeResource CaptionTextBlockStyle}\"\n                   Margin=\"5\" />\n        <TextBox Text=\"{x:Bind ViewModel.Memo.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}\"\n                 Margin=\"5\" />\n        <TextBlock Text=\"HasErrors\"\n                   Style=\"{ThemeResource CaptionTextBlockStyle}\"\n                   Margin=\"5\" />\n        <CheckBox IsChecked=\"{x:Bind ViewModel.HasErrors.Value, Mode=OneWay}\"\n                  IsEnabled=\"False\"\n                  Margin=\"5\" />\n    </StackPanel>\n</Page>\n\n\n\n\n\n\n\n\nLast property is \nHasErrors\n. It is a just bool property.\n\n\npublic class ViewModel\n{\n    // Set validation attributes\n    [Required(ErrorMessage = \"The name is required.\")]\n    [StringLength(100, ErrorMessage = \"The name length should be lower than 30.\")]\n    public ReactiveProperty<string> Name { get; }\n\n    public ViewModel()\n    {\n        Name = new ReactiveProperty<string>()\n            .SetValidateAttribute(() => Name);\n    }\n\n    public void DoSomething()\n    {\n        if (Name.HasErrors)\n        {\n            // invalid value case\n        }\n        else\n        {\n            // valid value case\n        }\n    }\n}\n\n\n\n\nDon't need initial validation error\n\n\nIn default behavior, ReactiveProperty report errors when validation logic set.\nIf you don't need initial validation error, then you can skip the error.\nJust call Skip method.\n\n\nclass ViewModel\n{\n    // Set validation attributes\n    [Required(ErrorMessage = \"The name is required.\")]\n    [StringLength(100, ErrorMessage = \"The name length should be lower than 30.\")]\n    public ReactiveProperty<string> Name { get; }\n\n    public ReactiveProperty<string> NameErrorMessage { get; }\n\n    public ViewModel()\n    {\n        Name = new ReactiveProperty<string>()\n            .SetValidateAttribute(() => Name);\n\n        // Handling an error message\n        NameErrorMessage = Name.ObserveErrorChanged\n            .Skip(1) // Skip the first error.\n            .Select(x => x?.OfType<string>()?.FirstOrDefault())\n            .ToReactiveProperty();\n    }\n}\n\n\n\n\nThe mode of ReactiveProperty\n\n\nReactiveProperty class call OnNext callback when Subscribe method called.\n\n\nvar x = new ReactiveProperty<string>(\"initial value\");\nx.Subscribe(x => Console.WriteLine(x)); // -> initial value\n\n\n\n\nYou could change this behavior when ReactiveProperty instance create.\nConstructor and ToReactiveProperty method have mode argument.\nThis can be set following values.\n\n\n\n\nReactivePropertyMode.None\n\n\nReactiveProperty doesn't call OnNext callback when Subscribe method call. And call OnNext callback if the same value set.\n\n\n\n\n\n\nReactivePropertyMode.DistinctUntilChanged\n\n\nThis doesn't call OnNext callback if same value set.\n\n\n\n\n\n\nReactivePropertyMode.RaiseLatestValueOnSubscribe\n\n\nThis calls OnNext callback when Subscribe method call.\n\n\n\n\n\n\n\n\nDefault value is \nReactivePropertyMode.DistinctUntilChanged | ReactivePropertyMode.RaiseLatestValueOnSubscribe\n.\n\n\nIf you don't need this behavior, then you can set ReactivePropertyMode.None value.\n\n\nvar x = new ReactiveProperty<string>(\"initial value\", mode: ReactivePropertyMode.None);\nx.Subscribe(x => Console.WriteLine(x)); // -> don't output value\nx.Value = \"initial value\"; // -> initial value\n\n\n\n\nReadOnlyReactiveProperty class\n\n\nIf you never set Value property, then you can use ReadOnlyReactiveProperty class.\nThis class can't set the property, and other behavior is same ReactiveProperty class.\nReadOnlyReactiveProperty class is created from ToReadOnlyReactiveProperty extension method.\n\n\nSee below.\n\n\npublic class ViewModel\n{\n    public ReactiveProperty<string> Input { get; }\n\n    // Output never set value.\n    public ReadOnlyReactiveProperty<string> Output { get; }\n\n    public ViewModel()\n    {\n        Input = new ReactiveProperty<string>(\"\");\n        Output = Input\n            .Delay(TimeSpan.FromSeconds(1))\n            .Select(x => x.ToUpper())\n            .ToReadOnlyReactiveProperty(); // convert to ReadOnlyReactiveProperty\n    }\n}\n\n\n\n\nUnsubscribe\n\n\nReactiveProperty class implements IDisposable interface.\nWhen Dispose method called, ReactiveProperty class releases all subscription.\nIn other instance's events subscribe, then you should call Dispose method when the end of ViewModel lifecycle.\n\n\npublic class ViewModel : IDisposable\n{\n    public ReadOnlyReactiveProperty<string> Time { get; }\n\n    public ViewModel()\n    {\n        Time = Observable.Interval(TimeSpan.FromSeconds(1))\n            .Select(_ => DateTime.Now.ToString(\"yyyy/MM/dd HH:mm:ss\"))\n            .ToReadOnlyReactiveProperty();\n    }\n\n    public void Dispose()\n    {\n        // Unsbscribe\n        Time.Dispose();\n    }\n}",
            "title": "ReactiveProperty"
        },
        {
            "location": "/features/ReactiveProperty/#reactiveproperty",
            "text": "ReactiveProperty is core class of this library.\nThis has following features.   Implements the INotifyPropretyChanged interface.  The value property raise the PropertyChanged event.    Implements the IObservable<T> interface.   Yes, The value property can bind to XAML control's property.\nAnd the class call the IObserver<T>#OnNext method when set the value.  A sample code is below.  using Reactive.Bindings;\nusing System;\n\nnamespace ReactivePropertyEduApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // create from defualt constructor(default value is null)\n            var name = new ReactiveProperty<string>();\n            // setup the event handler and the onNext callback.\n            name.PropertyChanged += (_, e) => Console.WriteLine($\"PropertyChanged: {e.PropertyName}\");\n            name.Subscribe(x => Console.WriteLine($\"OnNext: {x}\"));\n\n            // update the value property.\n            name.Value = \"neuecc\";\n            name.Value = \"xin9le\";\n            name.Value = \"okazuki\";\n        }\n    }\n}  The output of this program is below.  OnNext:\nOnNext: neuecc\nPropertyChanged: Value\nOnNext: xin9le\nPropertyChanged: Value\nOnNext: okazuki\nPropertyChanged: Value  What's deferent between PropertyChanged and onNext callback?\nThe onNext is called when subscribe. The PropertyChanged isn't called when added the event handler. And the onNext callback's argument is the property value, the PropertyChanged argument don't have the property value.  The PropertyChanged event was provided for data binding. In the normal case, you should use Reactive Extensions methods.",
            "title": "ReactiveProperty"
        },
        {
            "location": "/features/ReactiveProperty/#use-with-xaml-platform",
            "text": "The ReactiveProperty class is designed for XAML platform which is like WPF, UWP, and Xamarin.Forms.\nThis class can be used a ViewModel layer.   In the case that don't use the ReactiveProperty, a ViewModel class wrote below.   public class MainPageViewModel : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    private string _name;\n    public string Name\n    {\n        get => _name;\n        set\n        {\n            _name = value;\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Name)));\n        }\n    }\n\n    // Other properties are defined similar codes.\n}  And those properties binds in the XAML code.  <!-- In the WPF -->\n<TextBox Text=\"{Binding Name}\" />\n\n<!-- In the UWP(Runtime data binding) -->\n<TextBox Text=\"{Binding Name}\" />\n\n<!-- In the UWP(Compile time data binding) -->\n<TextBox Text=\"{x:Bind ViewModel.Name, Mode=TwoWay}\" />\n\n<!-- In the Xamarin.Forms -->\n<Entry Text=\"{Binding Name}\" />  In the case that uses the ReactiveProperty, a ViewModel code becomes very simple!  // The INotifyPropertyChanged interface must implement when using the WPF.\n// Because, if you don't implement this, then memory leak occurred.\npublic class MainPageViewModel\n{\n    public ReactiveProperty<string> Name { get; } = new ReactiveProperty<string>();\n\n    // Other properties are defined similar codes.\n}  When binding in the XAML code, you must add the  .Value  in binding path.\nThis is an only limitation of this library.  <!-- In the WPF -->\n<TextBox Text=\"{Binding Name.Value}\" />\n\n<!-- In the UWP(Runtime data binding) -->\n<TextBox Text=\"{Binding Name}.Value\" />\n\n<!-- In the UWP(Compile time data binding) -->\n<TextBox Text=\"{x:Bind ViewModel.Name.Value, Mode=TwoWay}\" />\n\n<!-- In the Xamarin.Forms -->\n<Entry Text=\"{Binding Name.Value}\" />   We forget the  .Value  sometimes. If you have a ReSharper license, then you can use this plugin. ReactiveProperty XAML Binding Corrector \nHighlight the missing of ReactiveProperty \".Value\" in XAML.",
            "title": "Use with XAML platform"
        },
        {
            "location": "/features/ReactiveProperty/#how-to-create-a-reactiveproperty-instance",
            "text": "The ReactiveProperty class can create from many methods.",
            "title": "How to create a ReactiveProperty instance"
        },
        {
            "location": "/features/ReactiveProperty/#create-from-the-constructor",
            "text": "The simplest way is that using constructor.  // create with the default value.\nvar name = new ReactiveProperty<string>();\nConsole.WriteLine(name.Value); // -> empty output\n\n// create with the initial value.\nvar name = new ReactiveProperty<string>(\"okazuki\");\nConsole.WriteLine(name.Value); // -> okazuki",
            "title": "Create from the constructor"
        },
        {
            "location": "/features/ReactiveProperty/#create-from-iobservablet",
            "text": "This can create from IObservable<T>.\nJust calls  ToReactiveProperty  method.  IObservable<long> observableInstance = Observable.Interval(TimeSpan.FromSeconds(1));\n\n// Convert to ReactiveProperty from IObservable.\nReactiveProperty<long> counter = observableInstance.ToReactiveProperty();",
            "title": "Create from IObservable&lt;T&gt;"
        },
        {
            "location": "/features/ReactiveProperty/#create-from-reactiveproperty",
            "text": "The ReactiveProperty implements IObservable interface.\nIt means that ReactiveProperty can be created from ReactiveProperty.  var name = new ReactiveProperty<string>(\"\");\n\nvar formalName = name.Select(x => $\"Dear {x}\")\n    .ToReactiveProperty();  All IObservable instances can become ReactiveProperty.",
            "title": "Create from ReactiveProperty"
        },
        {
            "location": "/features/ReactiveProperty/#validation",
            "text": "The ReactiveProperty class implements INotifyDataErrorInfo interface.",
            "title": "Validation"
        },
        {
            "location": "/features/ReactiveProperty/#set-custom-validation-logics",
            "text": "You can set custom validation logic using the SetValidateNotifyError method.  var name = new ReactiveProperty<string>()\n    .SetValidateNotifyError(x => string.IsNullOrWhiteSpace(x) ? \"Error message\" : null);  In the correct value case, validation logic should return null.\nIn invalid value case, logic should return an error message.",
            "title": "Set custom validation logics"
        },
        {
            "location": "/features/ReactiveProperty/#work-with-dataannotations",
            "text": "This class can work together with the DataAnnotations.\nYou can set validation attribute using the SetValidateAttribute method.  class ViewModel\n{\n    // Set validation attributes\n    [Required(ErrorMessage = \"The name is required.\")]\n    [StringLength(100, ErrorMessage = \"The name length should be lower than 30.\")]\n    public ReactiveProperty<string> Name { get; }\n\n    public ViewModel()\n    {\n        Name = new ReactiveProperty<string>()\n            // Set validation attributes into the ReactiveProperty.\n            .SetValidateAttribute(() => Name);\n    }\n}  WPF is integrated INotifyDataErrorInfo interface. See below.",
            "title": "Work with DataAnnotations"
        },
        {
            "location": "/features/ReactiveProperty/#handling-validation-errors",
            "text": "Another platform can't display error messages from the INofityDataErrorInfo interface.\nReactiveProperty class have some properties for handling validation errors.  A first property is  ObserveErrorChanged .\nThis type is  IObservable<IEnumerable> . You can convert to an error message from IEnumerable. See below.  class ViewModel\n{\n    // Set validation attributes\n    [Required(ErrorMessage = \"The name is required.\")]\n    [StringLength(100, ErrorMessage = \"The name length should be lower than 30.\")]\n    public ReactiveProperty<string> Name { get; }\n\n    public ReactiveProperty<string> NameErrorMessage { get; }\n\n    public ViewModel()\n    {\n        Name = new ReactiveProperty<string>()\n            // Set validation attributes into the ReactiveProperty.\n            .SetValidateAttribute(() => Name);\n\n        // Handling an error message\n        NameErrorMessage = Name.ObserveErrorChanged\n            .Select(x => x?.OfType<string>()?.FirstOrDefault())\n            .ToReactiveProperty();\n    }\n}  Bind  NameErrorMessage.Value  property to a text control. An error message can be displayed.  In the case of UWP, see below.  public sealed partial class MainPage : Page\n{\n    private ViewModel ViewModel { get; } = new ViewModel();\n    public MainPage()\n    {\n        this.InitializeComponent();\n    }\n}  <Page x:Class=\"App1.MainPage\"\n      xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n      xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n      xmlns:local=\"using:App1\"\n      xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n      xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n      mc:Ignorable=\"d\">\n    <StackPanel Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <TextBlock Text=\"Name\"\n                   Style=\"{ThemeResource CaptionTextBlockStyle}\" />\n        <TextBox Text=\"{x:Bind ViewModel.Name.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}\"\n                 Margin=\"5\" />\n        <TextBlock Text=\"{x:Bind ViewModel.NameErrorMessage.Value, Mode=OneWay}\"\n                   Foreground=\"Red\"\n                   Margin=\"5,0\"\n                   Style=\"{ThemeResource BodyTextBlockStyle}\" />\n    </StackPanel>\n</Page>   Next property is  ObserveHasErrors .  ObserveHasErrors  property type is  IObservable<bool> .\nIn popular input form case, combine  ObserveHasErrors  property values very useful.  This sample program is that create HasErros property that type is ReactiveProperty<bool> that combine two ReactiveProperty's ObserveHasErrors properties.  public class ViewModel\n{\n    // Set validation attributes\n    [Required(ErrorMessage = \"The name is required.\")]\n    [StringLength(100, ErrorMessage = \"The name length should be lower than 30.\")]\n    public ReactiveProperty<string> Name { get; }\n\n    [Required(ErrorMessage = \"The memo is required.\")]\n    public ReactiveProperty<string> Memo { get; }\n\n    public ReactiveProperty<bool> HasErrors { get; }\n\n    public ViewModel()\n    {\n        Name = new ReactiveProperty<string>()\n            .SetValidateAttribute(() => Name);\n\n        Memo = new ReactiveProperty<string>()\n            .SetValidateAttribute(() => Memo);\n\n        // You can combine some ObserveHasErrors values.\n        HasErrors = new[]\n            {\n                Name.ObserveHasErrors,\n                Memo.ObserveHasErrors,\n            }.CombineLatest(x => x.Any(y => y))\n            .ToReactiveProperty();\n    }\n}  <Page x:Class=\"App1.MainPage\"\n      xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n      xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n      xmlns:local=\"using:App1\"\n      xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n      xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n      mc:Ignorable=\"d\">\n    <StackPanel Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <TextBlock Text=\"Name\"\n                   Style=\"{ThemeResource CaptionTextBlockStyle}\" \n                   Margin=\"5\" />\n        <TextBox Text=\"{x:Bind ViewModel.Name.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}\"\n                 Margin=\"5\" />\n        <TextBlock Text=\"Memo\"\n                   Style=\"{ThemeResource CaptionTextBlockStyle}\"\n                   Margin=\"5\" />\n        <TextBox Text=\"{x:Bind ViewModel.Memo.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}\"\n                 Margin=\"5\" />\n        <TextBlock Text=\"HasErrors\"\n                   Style=\"{ThemeResource CaptionTextBlockStyle}\"\n                   Margin=\"5\" />\n        <CheckBox IsChecked=\"{x:Bind ViewModel.HasErrors.Value, Mode=OneWay}\"\n                  IsEnabled=\"False\"\n                  Margin=\"5\" />\n    </StackPanel>\n</Page>    Last property is  HasErrors . It is a just bool property.  public class ViewModel\n{\n    // Set validation attributes\n    [Required(ErrorMessage = \"The name is required.\")]\n    [StringLength(100, ErrorMessage = \"The name length should be lower than 30.\")]\n    public ReactiveProperty<string> Name { get; }\n\n    public ViewModel()\n    {\n        Name = new ReactiveProperty<string>()\n            .SetValidateAttribute(() => Name);\n    }\n\n    public void DoSomething()\n    {\n        if (Name.HasErrors)\n        {\n            // invalid value case\n        }\n        else\n        {\n            // valid value case\n        }\n    }\n}",
            "title": "Handling validation errors"
        },
        {
            "location": "/features/ReactiveProperty/#dont-need-initial-validation-error",
            "text": "In default behavior, ReactiveProperty report errors when validation logic set.\nIf you don't need initial validation error, then you can skip the error.\nJust call Skip method.  class ViewModel\n{\n    // Set validation attributes\n    [Required(ErrorMessage = \"The name is required.\")]\n    [StringLength(100, ErrorMessage = \"The name length should be lower than 30.\")]\n    public ReactiveProperty<string> Name { get; }\n\n    public ReactiveProperty<string> NameErrorMessage { get; }\n\n    public ViewModel()\n    {\n        Name = new ReactiveProperty<string>()\n            .SetValidateAttribute(() => Name);\n\n        // Handling an error message\n        NameErrorMessage = Name.ObserveErrorChanged\n            .Skip(1) // Skip the first error.\n            .Select(x => x?.OfType<string>()?.FirstOrDefault())\n            .ToReactiveProperty();\n    }\n}",
            "title": "Don't need initial validation error"
        },
        {
            "location": "/features/ReactiveProperty/#the-mode-of-reactiveproperty",
            "text": "ReactiveProperty class call OnNext callback when Subscribe method called.  var x = new ReactiveProperty<string>(\"initial value\");\nx.Subscribe(x => Console.WriteLine(x)); // -> initial value  You could change this behavior when ReactiveProperty instance create.\nConstructor and ToReactiveProperty method have mode argument.\nThis can be set following values.   ReactivePropertyMode.None  ReactiveProperty doesn't call OnNext callback when Subscribe method call. And call OnNext callback if the same value set.    ReactivePropertyMode.DistinctUntilChanged  This doesn't call OnNext callback if same value set.    ReactivePropertyMode.RaiseLatestValueOnSubscribe  This calls OnNext callback when Subscribe method call.     Default value is  ReactivePropertyMode.DistinctUntilChanged | ReactivePropertyMode.RaiseLatestValueOnSubscribe .  If you don't need this behavior, then you can set ReactivePropertyMode.None value.  var x = new ReactiveProperty<string>(\"initial value\", mode: ReactivePropertyMode.None);\nx.Subscribe(x => Console.WriteLine(x)); // -> don't output value\nx.Value = \"initial value\"; // -> initial value",
            "title": "The mode of ReactiveProperty"
        },
        {
            "location": "/features/ReactiveProperty/#readonlyreactiveproperty-class",
            "text": "If you never set Value property, then you can use ReadOnlyReactiveProperty class.\nThis class can't set the property, and other behavior is same ReactiveProperty class.\nReadOnlyReactiveProperty class is created from ToReadOnlyReactiveProperty extension method.  See below.  public class ViewModel\n{\n    public ReactiveProperty<string> Input { get; }\n\n    // Output never set value.\n    public ReadOnlyReactiveProperty<string> Output { get; }\n\n    public ViewModel()\n    {\n        Input = new ReactiveProperty<string>(\"\");\n        Output = Input\n            .Delay(TimeSpan.FromSeconds(1))\n            .Select(x => x.ToUpper())\n            .ToReadOnlyReactiveProperty(); // convert to ReadOnlyReactiveProperty\n    }\n}",
            "title": "ReadOnlyReactiveProperty class"
        },
        {
            "location": "/features/ReactiveProperty/#unsubscribe",
            "text": "ReactiveProperty class implements IDisposable interface.\nWhen Dispose method called, ReactiveProperty class releases all subscription.\nIn other instance's events subscribe, then you should call Dispose method when the end of ViewModel lifecycle.  public class ViewModel : IDisposable\n{\n    public ReadOnlyReactiveProperty<string> Time { get; }\n\n    public ViewModel()\n    {\n        Time = Observable.Interval(TimeSpan.FromSeconds(1))\n            .Select(_ => DateTime.Now.ToString(\"yyyy/MM/dd HH:mm:ss\"))\n            .ToReadOnlyReactiveProperty();\n    }\n\n    public void Dispose()\n    {\n        // Unsbscribe\n        Time.Dispose();\n    }\n}",
            "title": "Unsubscribe"
        },
        {
            "location": "/features/Work-together-with-plane-model-layer-objects/",
            "text": "Work together with plane model layer objects\n\n\nThe classes of this library can work together with POCO classes.\n\n\nConnect to classes that implement INotifyPropertyChanged\n\n\nReactiveProperty provides many features that synchronize to POCO class instance.\n\n\nOne-way synchronization\n\n\nToObserveProperty extension method of INotifyPropertyChanged interface convert INotifyPropertyChanged to IObservable<T>.\nIObservable can convert to ReactiveProperty. It means that can be one-way synchronization to ReactiveProperty from INotifyPropertyChanged.\n\n\nFor example, below class is.\n\n\npublic class BindableBase : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    protected void RaisePropertyChanged([CallerMemberName]string propertyName = null) =>\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n\n    protected void SetProperty<T>(ref T field, T value, [CallerMemberName]string propertyName = null)\n    {\n        if (Comparer<T>.Default.Compare(field, value) == 0)\n        {\n            return;\n        }\n\n        field = value;\n        RaisePropertyChanged(propertyName);\n    }\n}\n\npublic class Person : BindableBase\n{\n    private string _name;\n    public string Name\n    {\n        get { return _name; }\n        set { SetProperty(ref _name, value); }\n    }\n\n    private int _age;\n    public int Age\n    {\n        get { return _age; }\n        set { SetProperty(ref _age, value); }\n    }\n}\n\n\n\n\nOne-way synchronization is the following code.\n\n\n// using Reactive.Bindings.Extensions;\npublic class ViewModel\n{\n    private Person Person { get; } = new Person();\n\n    public ReadOnlyReactiveProperty<string> Name { get; }\n\n    public ReactiveCommand UpdatePersonCommand { get; }\n\n    public ViewModel()\n    {\n        Name = Person\n            // Convert the Name PropertyChanged event to IObservable<string>\n            .ObserveProperty(x => x.Name)\n            // Convert to ReadOnlyReactiveProperty<string>\n            .ToReadOnlyReactiveProperty();\n\n        UpdatePersonCommand = new ReactiveCommand()\n            .WithSubscribe(() =>\n            {\n                // Update the name property.\n                Person.Name = \"Tanaka\";\n            });\n    }\n}\n\n\n\n\nTwo-way synchronization\n\n\nToReactivePropertyAsSynchronized extension method provides two-way synchronization.\n\n\n// using Reactive.Bindings.Extensions;\npublic class ViewModel\n{\n    public Person Person { get; } = new Person();\n\n    public ReactiveProperty<string> Name { get; }\n\n    public ViewModel()\n    {\n        Name = Person.ToReactivePropertyAsSynchronized(x => x.Name);\n    }\n}\n\n\n\n\nUWP platfrom example is below.\n\n\nMainPage.xaml.cs\n\n\npublic sealed partial class MainPage : Page\n{\n    private ViewModel ViewModel { get; } = new ViewModel();\n    public MainPage()\n    {\n        this.InitializeComponent();\n    }\n}\n\n\n\n\nMainPage.xaml\n\n\n<Page x:Class=\"App1.MainPage\"\n      xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n      xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n      xmlns:local=\"using:App1\"\n      xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n      xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n      mc:Ignorable=\"d\">\n    <StackPanel Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <TextBlock Text=\"ReactiveProperty\"\n                   Style=\"{ThemeResource CaptionTextBlockStyle}\"\n                   Margin=\"5,0\" />\n        <TextBox Text=\"{x:Bind ViewModel.Name.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}\"\n                 Margin=\"5\" />\n        <TextBlock Text=\"Person.Name\"\n                   Style=\"{ThemeResource CaptionTextBlockStyle}\"\n                   Margin=\"5,0\" />\n        <TextBox Text=\"{x:Bind ViewModel.Person.Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}\"\n                 Margin=\"5\" />\n    </StackPanel>\n</Page>\n\n\n\n\n\n\nToSynchronizedReactiveProperty extension method can add convert logic and convert-back logic.\n\n\npublic class ViewModel\n{\n    public Person Person { get; } = new Person();\n\n    public ReactiveProperty<string> Name { get; }\n\n    public ViewModel()\n    {\n        Name = Person.ToReactivePropertyAsSynchronized(x => x.Name,\n            convert: x => string.IsNullOrWhiteSpace(x) ? \"\" : $\"{x}-san\",\n            convertBack: x => Regex.Replace(x, \"-san$\", \"\"));\n    }\n}\n\n\n\n\n\n\nWhen an ignoreValidationErrorValue argument set to true, then stop the synchronization if validation error occurred.\n\n\npublic class ViewModel\n{\n    public Person Person { get; } = new Person();\n\n    [StringLength(10)]\n    public ReactiveProperty<string> Name { get; }\n\n    public ViewModel()\n    {\n        Name = Person.ToReactivePropertyAsSynchronized(x => x.Name,\n            convert: x => string.IsNullOrWhiteSpace(x) ? \"\" : $\"{x}-san\",\n            convertBack: x => Regex.Replace(x, \"-san$\", \"\"),\n            ignoreValidationErrorValue: true)  // activate this behavior\n            .SetValidateAttribute(() => Name); // set validation logic\n    }\n}",
            "title": "Work together with plane model layer objects"
        },
        {
            "location": "/features/Work-together-with-plane-model-layer-objects/#work-together-with-plane-model-layer-objects",
            "text": "The classes of this library can work together with POCO classes.",
            "title": "Work together with plane model layer objects"
        },
        {
            "location": "/features/Work-together-with-plane-model-layer-objects/#connect-to-classes-that-implement-inotifypropertychanged",
            "text": "ReactiveProperty provides many features that synchronize to POCO class instance.",
            "title": "Connect to classes that implement INotifyPropertyChanged"
        },
        {
            "location": "/features/Work-together-with-plane-model-layer-objects/#one-way-synchronization",
            "text": "ToObserveProperty extension method of INotifyPropertyChanged interface convert INotifyPropertyChanged to IObservable<T>.\nIObservable can convert to ReactiveProperty. It means that can be one-way synchronization to ReactiveProperty from INotifyPropertyChanged.  For example, below class is.  public class BindableBase : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    protected void RaisePropertyChanged([CallerMemberName]string propertyName = null) =>\n        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));\n\n    protected void SetProperty<T>(ref T field, T value, [CallerMemberName]string propertyName = null)\n    {\n        if (Comparer<T>.Default.Compare(field, value) == 0)\n        {\n            return;\n        }\n\n        field = value;\n        RaisePropertyChanged(propertyName);\n    }\n}\n\npublic class Person : BindableBase\n{\n    private string _name;\n    public string Name\n    {\n        get { return _name; }\n        set { SetProperty(ref _name, value); }\n    }\n\n    private int _age;\n    public int Age\n    {\n        get { return _age; }\n        set { SetProperty(ref _age, value); }\n    }\n}  One-way synchronization is the following code.  // using Reactive.Bindings.Extensions;\npublic class ViewModel\n{\n    private Person Person { get; } = new Person();\n\n    public ReadOnlyReactiveProperty<string> Name { get; }\n\n    public ReactiveCommand UpdatePersonCommand { get; }\n\n    public ViewModel()\n    {\n        Name = Person\n            // Convert the Name PropertyChanged event to IObservable<string>\n            .ObserveProperty(x => x.Name)\n            // Convert to ReadOnlyReactiveProperty<string>\n            .ToReadOnlyReactiveProperty();\n\n        UpdatePersonCommand = new ReactiveCommand()\n            .WithSubscribe(() =>\n            {\n                // Update the name property.\n                Person.Name = \"Tanaka\";\n            });\n    }\n}",
            "title": "One-way synchronization"
        },
        {
            "location": "/features/Work-together-with-plane-model-layer-objects/#two-way-synchronization",
            "text": "ToReactivePropertyAsSynchronized extension method provides two-way synchronization.  // using Reactive.Bindings.Extensions;\npublic class ViewModel\n{\n    public Person Person { get; } = new Person();\n\n    public ReactiveProperty<string> Name { get; }\n\n    public ViewModel()\n    {\n        Name = Person.ToReactivePropertyAsSynchronized(x => x.Name);\n    }\n}  UWP platfrom example is below.  MainPage.xaml.cs  public sealed partial class MainPage : Page\n{\n    private ViewModel ViewModel { get; } = new ViewModel();\n    public MainPage()\n    {\n        this.InitializeComponent();\n    }\n}  MainPage.xaml  <Page x:Class=\"App1.MainPage\"\n      xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n      xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n      xmlns:local=\"using:App1\"\n      xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n      xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n      mc:Ignorable=\"d\">\n    <StackPanel Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <TextBlock Text=\"ReactiveProperty\"\n                   Style=\"{ThemeResource CaptionTextBlockStyle}\"\n                   Margin=\"5,0\" />\n        <TextBox Text=\"{x:Bind ViewModel.Name.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}\"\n                 Margin=\"5\" />\n        <TextBlock Text=\"Person.Name\"\n                   Style=\"{ThemeResource CaptionTextBlockStyle}\"\n                   Margin=\"5,0\" />\n        <TextBox Text=\"{x:Bind ViewModel.Person.Name, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}\"\n                 Margin=\"5\" />\n    </StackPanel>\n</Page>   ToSynchronizedReactiveProperty extension method can add convert logic and convert-back logic.  public class ViewModel\n{\n    public Person Person { get; } = new Person();\n\n    public ReactiveProperty<string> Name { get; }\n\n    public ViewModel()\n    {\n        Name = Person.ToReactivePropertyAsSynchronized(x => x.Name,\n            convert: x => string.IsNullOrWhiteSpace(x) ? \"\" : $\"{x}-san\",\n            convertBack: x => Regex.Replace(x, \"-san$\", \"\"));\n    }\n}   When an ignoreValidationErrorValue argument set to true, then stop the synchronization if validation error occurred.  public class ViewModel\n{\n    public Person Person { get; } = new Person();\n\n    [StringLength(10)]\n    public ReactiveProperty<string> Name { get; }\n\n    public ViewModel()\n    {\n        Name = Person.ToReactivePropertyAsSynchronized(x => x.Name,\n            convert: x => string.IsNullOrWhiteSpace(x) ? \"\" : $\"{x}-san\",\n            convertBack: x => Regex.Replace(x, \"-san$\", \"\"),\n            ignoreValidationErrorValue: true)  // activate this behavior\n            .SetValidateAttribute(() => Name); // set validation logic\n    }\n}",
            "title": "Two-way synchronization"
        },
        {
            "location": "/getting-started/Universal-Windows-Platform/",
            "text": "Universal Windows Platform\n\n\nCreate a project\n\n\n\n\n\n\nCreate a Blank App (Universal Windows) project.\n\n\n\n\nSet a \nTarget version\n item to Windows 10 Fall Creators Update (1.0.: Build 16299) and \nMinimum version\n item to the same.\n\n\n\n\n\n\nReactiveProperty target the .NET Standard 1.3. You can use this library with the another version UWP. My recomended version is after the Createors Update. After this version can use compile time binding.\n\n\n\n\n\n\nInstall ReactiveProperty package from NuGet.\n\n\n\n\n\n\nEdit codes\n\n\n\n\nCreate a MainPageViewModel.cs file.\n\n\nEdit files like following.\n\n\n\n\nMainPageViewModel.cs\n\n\nusing Reactive.Bindings;\nusing System;\nusing System.Linq;\nusing System.Reactive.Linq;\n\nnamespace GettingStartedUWP\n{\n    public class MainPageViewModel\n    {\n        public ReactiveProperty<string> Input { get; }\n        public ReadOnlyReactiveProperty<string> Output { get; }\n\n        public MainPageViewModel()\n        {\n            Input = new ReactiveProperty<string>(\"\");\n            Output = Input\n                .Delay(TimeSpan.FromSeconds(1))\n                .Select(x => x.ToUpper())\n                .ToReadOnlyReactiveProperty();\n        }\n    }\n}\n\n\n\n\nMainPage.xaml.cs\n\n\nusing Windows.UI.Xaml.Controls;\n\n// The Blank Page item template is documented at https://go.microsoft.com/fwlink/?LinkId=402352&clcid=0x409\n\nnamespace GettingStartedUWP\n{\n    /// <summary>\n    /// An empty page that can be used on its own or navigated to within a Frame.\n    /// </summary>\n    public sealed partial class MainPage : Page\n    {\n        private MainPageViewModel ViewModel { get; } = new MainPageViewModel();\n        public MainPage()\n        {\n            this.InitializeComponent();\n        }\n    }\n}\n\n\n\n\nMainPage.xaml\n\n\n<Page x:Class=\"GettingStartedUWP.MainPage\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:local=\"using:GettingStartedUWP\"\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n    mc:Ignorable=\"d\">\n\n    <StackPanel Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <TextBlock Text=\"Input\"\n                Style=\"{StaticResource CaptionTextBlockStyle}\" />\n        <TextBox Text=\"{x:Bind ViewModel.Input.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}\"\n                Margin=\"5\" />\n        <TextBlock Text=\"Output\"\n                Style=\"{StaticResource CaptionTextBlockStyle}\" />\n        <TextBlock Text=\"{x:Bind ViewModel.Output.Value, Mode=OneWay}\"\n                Style=\"{StaticResource BodyTextBlockStyle}\"\n                Margin=\"5\" />\n    </StackPanel>\n</Page>\n\n\n\n\nLaunch the application\n\n\nAfter launch the app, You can see the below window.\nThe output value was displayed to upper case, after 1sec from the input.",
            "title": "Universal Windows Platform"
        },
        {
            "location": "/getting-started/Universal-Windows-Platform/#universal-windows-platform",
            "text": "",
            "title": "Universal Windows Platform"
        },
        {
            "location": "/getting-started/Universal-Windows-Platform/#create-a-project",
            "text": "Create a Blank App (Universal Windows) project.   Set a  Target version  item to Windows 10 Fall Creators Update (1.0.: Build 16299) and  Minimum version  item to the same.    ReactiveProperty target the .NET Standard 1.3. You can use this library with the another version UWP. My recomended version is after the Createors Update. After this version can use compile time binding.    Install ReactiveProperty package from NuGet.",
            "title": "Create a project"
        },
        {
            "location": "/getting-started/Universal-Windows-Platform/#edit-codes",
            "text": "Create a MainPageViewModel.cs file.  Edit files like following.   MainPageViewModel.cs  using Reactive.Bindings;\nusing System;\nusing System.Linq;\nusing System.Reactive.Linq;\n\nnamespace GettingStartedUWP\n{\n    public class MainPageViewModel\n    {\n        public ReactiveProperty<string> Input { get; }\n        public ReadOnlyReactiveProperty<string> Output { get; }\n\n        public MainPageViewModel()\n        {\n            Input = new ReactiveProperty<string>(\"\");\n            Output = Input\n                .Delay(TimeSpan.FromSeconds(1))\n                .Select(x => x.ToUpper())\n                .ToReadOnlyReactiveProperty();\n        }\n    }\n}  MainPage.xaml.cs  using Windows.UI.Xaml.Controls;\n\n// The Blank Page item template is documented at https://go.microsoft.com/fwlink/?LinkId=402352&clcid=0x409\n\nnamespace GettingStartedUWP\n{\n    /// <summary>\n    /// An empty page that can be used on its own or navigated to within a Frame.\n    /// </summary>\n    public sealed partial class MainPage : Page\n    {\n        private MainPageViewModel ViewModel { get; } = new MainPageViewModel();\n        public MainPage()\n        {\n            this.InitializeComponent();\n        }\n    }\n}  MainPage.xaml  <Page x:Class=\"GettingStartedUWP.MainPage\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:local=\"using:GettingStartedUWP\"\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n    mc:Ignorable=\"d\">\n\n    <StackPanel Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <TextBlock Text=\"Input\"\n                Style=\"{StaticResource CaptionTextBlockStyle}\" />\n        <TextBox Text=\"{x:Bind ViewModel.Input.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}\"\n                Margin=\"5\" />\n        <TextBlock Text=\"Output\"\n                Style=\"{StaticResource CaptionTextBlockStyle}\" />\n        <TextBlock Text=\"{x:Bind ViewModel.Output.Value, Mode=OneWay}\"\n                Style=\"{StaticResource BodyTextBlockStyle}\"\n                Margin=\"5\" />\n    </StackPanel>\n</Page>",
            "title": "Edit codes"
        },
        {
            "location": "/getting-started/Universal-Windows-Platform/#launch-the-application",
            "text": "After launch the app, You can see the below window.\nThe output value was displayed to upper case, after 1sec from the input.",
            "title": "Launch the application"
        },
        {
            "location": "/getting-started/Windows-Presentation-Foundation/",
            "text": "Windows Presentation Foundation\n\n\nCreate a project\n\n\n\n\nCreate a WPF App (.NET Framework) project.\n\n\nInstall the ReactiveProperty from NuGet.\n\n\n\n\nEdit codes\n\n\n\n\nCreate a MainWindowViewModel.cs file.\n\n\nEdit files like following.\n\n\n\n\nMainWindowViewModel.cs\n\n\nusing Reactive.Bindings;\nusing System;\nusing System.ComponentModel;\nusing System.Linq;\nusing System.Reactive.Linq;\n\nnamespace WpfApp1\n{\n    class MainWindowViewModel : INotifyPropertyChanged\n    {\n        public event PropertyChangedEventHandler PropertyChanged;\n\n        public ReactiveProperty<string> Input { get; }\n        public ReadOnlyReactiveProperty<string> Output { get; }\n\n        public MainWindowViewModel()\n        {\n            Input = new ReactiveProperty<string>(\"\");\n            Output = Input\n                .Delay(TimeSpan.FromSeconds(1))\n                .Select(x => x.ToUpper())\n                .ToReadOnlyReactiveProperty();\n        }\n    }\n}\n\n\n\n\nMainWindow.xaml\n\n\n<Window x:Class=\"WpfApp1.MainWindow\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n        xmlns:local=\"clr-namespace:WpfApp1\"\n        mc:Ignorable=\"d\"\n        Title=\"MainWindow\"\n        Height=\"350\"\n        Width=\"525\">\n    <Window.DataContext>\n        <local:MainWindowViewModel />\n    </Window.DataContext>\n    <StackPanel>\n        <Label Content=\"Input\" />\n        <TextBox Text=\"{Binding Input.Value, UpdateSourceTrigger=PropertyChanged}\"\n                 Margin=\"5\" />\n        <Label Content=\"Output\" />\n        <TextBlock Text=\"{Binding Output.Value}\"\n                   Margin=\"5\" />\n    </StackPanel>\n</Window>\n\n\n\n\nLaunch the application.\n\n\nAfter launch the app, You can see the below window.\nThe output value was displayed to upper case, after 1sec from the input.",
            "title": "Windows Presentation Foundation"
        },
        {
            "location": "/getting-started/Windows-Presentation-Foundation/#windows-presentation-foundation",
            "text": "",
            "title": "Windows Presentation Foundation"
        },
        {
            "location": "/getting-started/Windows-Presentation-Foundation/#create-a-project",
            "text": "Create a WPF App (.NET Framework) project.  Install the ReactiveProperty from NuGet.",
            "title": "Create a project"
        },
        {
            "location": "/getting-started/Windows-Presentation-Foundation/#edit-codes",
            "text": "Create a MainWindowViewModel.cs file.  Edit files like following.   MainWindowViewModel.cs  using Reactive.Bindings;\nusing System;\nusing System.ComponentModel;\nusing System.Linq;\nusing System.Reactive.Linq;\n\nnamespace WpfApp1\n{\n    class MainWindowViewModel : INotifyPropertyChanged\n    {\n        public event PropertyChangedEventHandler PropertyChanged;\n\n        public ReactiveProperty<string> Input { get; }\n        public ReadOnlyReactiveProperty<string> Output { get; }\n\n        public MainWindowViewModel()\n        {\n            Input = new ReactiveProperty<string>(\"\");\n            Output = Input\n                .Delay(TimeSpan.FromSeconds(1))\n                .Select(x => x.ToUpper())\n                .ToReadOnlyReactiveProperty();\n        }\n    }\n}  MainWindow.xaml  <Window x:Class=\"WpfApp1.MainWindow\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n        xmlns:local=\"clr-namespace:WpfApp1\"\n        mc:Ignorable=\"d\"\n        Title=\"MainWindow\"\n        Height=\"350\"\n        Width=\"525\">\n    <Window.DataContext>\n        <local:MainWindowViewModel />\n    </Window.DataContext>\n    <StackPanel>\n        <Label Content=\"Input\" />\n        <TextBox Text=\"{Binding Input.Value, UpdateSourceTrigger=PropertyChanged}\"\n                 Margin=\"5\" />\n        <Label Content=\"Output\" />\n        <TextBlock Text=\"{Binding Output.Value}\"\n                   Margin=\"5\" />\n    </StackPanel>\n</Window>",
            "title": "Edit codes"
        },
        {
            "location": "/getting-started/Windows-Presentation-Foundation/#launch-the-application",
            "text": "After launch the app, You can see the below window.\nThe output value was displayed to upper case, after 1sec from the input.",
            "title": "Launch the application."
        },
        {
            "location": "/getting-started/Xamarin-Forms/",
            "text": "Xamarin.Forms\n\n\nCreate a project\n\n\n\n\nCreate a Cross Platform app (Xamarin.Forms) project.\n\n\nSetting the \nNew Cross Platform App\n dialog like following.\n  Choice the .NET Standard project. Of couse you can select shared project.\n  \n\n\nInstall ReactiveProperty to all projects from NGet.\n\n\n\n\nEdit codes\n\n\nTBD",
            "title": "Xamarin.Forms"
        },
        {
            "location": "/getting-started/Xamarin-Forms/#xamarinforms",
            "text": "",
            "title": "Xamarin.Forms"
        },
        {
            "location": "/getting-started/Xamarin-Forms/#create-a-project",
            "text": "Create a Cross Platform app (Xamarin.Forms) project.  Setting the  New Cross Platform App  dialog like following.\n  Choice the .NET Standard project. Of couse you can select shared project.\n    Install ReactiveProperty to all projects from NGet.",
            "title": "Create a project"
        },
        {
            "location": "/getting-started/Xamarin-Forms/#edit-codes",
            "text": "TBD",
            "title": "Edit codes"
        }
    ]
}