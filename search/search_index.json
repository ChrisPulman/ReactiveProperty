{
    "docs": [
        {
            "location": "/",
            "text": "ReactiveProperty documentation\n\n\nReactiveProperty provides MVVM and asynchronous support features under Reactive Extensions. Target framework is .NET 4.6, UWP, Xamarin.iOS, Xamarin.Android, Xamarin.Mac, Xamarin.Forms and .NET Standard 1.3.\n\n\n\n\nConcept of ReactiveProperty is \nFun the programing.\n\nYou can write MVVM pattern program using ReactiveProperty very fun.\n\n\n\n\nFollowing code is tow way binding between ReactiveProperty and plane object property.\n\n\nclass Model : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    private string _name;\n    public string Name\n    {\n        get => _name;\n        set\n        {\n            _name = value;\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Name)));\n        }\n    }\n}\nclass ViewModel\n{\n    private readonly Model _model = new Model();\n    public ReactiveProperty<string> Name { get; }\n    public ViewModel()\n    {\n        // TwoWay synchronize to ReactiveProperty and Model#Name property.\n        Name = _model.ToReactivePropertyAsSynchronized(x => x.Name);\n    }\n}\n\n\n\n\nReactiveProperty is implemented the IObservable<T>. Yes! You can use the LINQ.\n\n\nvar name = new ReactiveProperty<string>();\nname.Where(x => x.StartsWith(\"_\")) // filter\n    .Select(x => x.ToUpper()) // convert\n    .Subscribe(x => { ... some action ... });\n\n\n\n\nReactiveProperty is created from IObservable<T>. \n\n\nclass ViewModel\n{\n    public ReactiveProperty<string> Input { get; }\n    public ReactiveProperty<string> Output { get; }\n\n    public ViewModel()\n    {\n        Input = new ReactiveProperty(\"\");\n        Output = Input\n            .Delay(TimeSpan.FromSecond(1)) // Using a Rx method.\n            .Select(x => x.ToUpper()) // Using a LINQ method.\n            .ToReactiveProperty(); // Convert to ReactiveProperty\n    }\n}\n\n\n\n\nI think that this method chain is very cool.\n\n\nAnd we provide the ReactiveCommand class what implements ICommand and IObservable<T> interface. ReactiveCommand can create from IObservable<bool>\n\n\nvar command = Observable.Interval(TimeSpan.FromSecond(1))\n    .Select(x => x % 2 == 0) // convert to IO<bool>\n    .ToReactiveCommand();\ncommand.Subscribe(_ =>\n{\n    // ReactiveCommand invoke an OnNext when Execute method was called.\n});\n\n\n\n\nYou can start the ReactiveProperty from following links.\n\n\n\n\nGetting started\n\n\nWPF\n\n\nUWP\n\n\nXamarin.Forms",
            "title": "ReactiveProperty documentation"
        },
        {
            "location": "/#reactiveproperty-documentation",
            "text": "ReactiveProperty provides MVVM and asynchronous support features under Reactive Extensions. Target framework is .NET 4.6, UWP, Xamarin.iOS, Xamarin.Android, Xamarin.Mac, Xamarin.Forms and .NET Standard 1.3.   Concept of ReactiveProperty is  Fun the programing. \nYou can write MVVM pattern program using ReactiveProperty very fun.   Following code is tow way binding between ReactiveProperty and plane object property.  class Model : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    private string _name;\n    public string Name\n    {\n        get => _name;\n        set\n        {\n            _name = value;\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Name)));\n        }\n    }\n}\nclass ViewModel\n{\n    private readonly Model _model = new Model();\n    public ReactiveProperty<string> Name { get; }\n    public ViewModel()\n    {\n        // TwoWay synchronize to ReactiveProperty and Model#Name property.\n        Name = _model.ToReactivePropertyAsSynchronized(x => x.Name);\n    }\n}  ReactiveProperty is implemented the IObservable<T>. Yes! You can use the LINQ.  var name = new ReactiveProperty<string>();\nname.Where(x => x.StartsWith(\"_\")) // filter\n    .Select(x => x.ToUpper()) // convert\n    .Subscribe(x => { ... some action ... });  ReactiveProperty is created from IObservable<T>.   class ViewModel\n{\n    public ReactiveProperty<string> Input { get; }\n    public ReactiveProperty<string> Output { get; }\n\n    public ViewModel()\n    {\n        Input = new ReactiveProperty(\"\");\n        Output = Input\n            .Delay(TimeSpan.FromSecond(1)) // Using a Rx method.\n            .Select(x => x.ToUpper()) // Using a LINQ method.\n            .ToReactiveProperty(); // Convert to ReactiveProperty\n    }\n}  I think that this method chain is very cool.  And we provide the ReactiveCommand class what implements ICommand and IObservable<T> interface. ReactiveCommand can create from IObservable<bool>  var command = Observable.Interval(TimeSpan.FromSecond(1))\n    .Select(x => x % 2 == 0) // convert to IO<bool>\n    .ToReactiveCommand();\ncommand.Subscribe(_ =>\n{\n    // ReactiveCommand invoke an OnNext when Execute method was called.\n});  You can start the ReactiveProperty from following links.   Getting started  WPF  UWP  Xamarin.Forms",
            "title": "ReactiveProperty documentation"
        },
        {
            "location": "/features/ReactivePropertyClass/",
            "text": "ReactiveProperty class\n\n\nReactiveProperty is core class of this library.\nThis has following features.\n\n\n\n\nImplements the INotifyPropretyChanged interface.\n\n\nThe value property raise the PropertyChanged event.\n\n\n\n\n\n\nImplements the IObservable<T> interface.\n\n\n\n\nYes, The value property can bind to XAML control's property.\nAnd the class call the IObserver<T>#OnNext method when set the value.\n\n\nA sample code is below.\n\n\nusing Reactive.Bindings;\nusing System;\n\nnamespace ReactivePropertyEduApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // create from defualt constructor(default value is null)\n            var name = new ReactiveProperty<string>();\n            // setup the event handler and the onNext callback.\n            name.PropertyChanged += (_, e) => Console.WriteLine($\"PropertyChanged: {e.PropertyName}\");\n            name.Subscribe(x => Console.WriteLine($\"OnNext: {x}\"));\n\n            // update the value property.\n            name.Value = \"neuecc\";\n            name.Value = \"xin9le\";\n            name.Value = \"okazuki\";\n        }\n    }\n}\n\n\n\n\nThe output of this program is below.\n\n\nOnNext:\nOnNext: neuecc\nPropertyChanged: Value\nOnNext: xin9le\nPropertyChanged: Value\nOnNext: okazuki\nPropertyChanged: Value\n\n\n\n\nWhat's deferent between PropertyChanged and onNext callback?\nThe onNext is called when subscribe. The PropertyChanged isn't called when added the event handler. And the onNext callback's argument is the property value, the PropertyChanged argument don't have the property value.\n\n\nThe PropertyChanged event was provided for the data binding. In the normal case, you should use the Reactive Extensions methods.\n\n\nUse with the XAML platform\n\n\nThe ReactiveProperty class is designed for the XAML platform which is like WPF, UWP, and Xamarin.Forms.\nThis class can be used the ViewModel layer. \n\n\nIn the case that don't use the ReactiveProperty, the ViewModel class wrote the below. \n\n\npublic class MainPageViewModel : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    private string _name;\n    public string Name\n    {\n        get => _name;\n        set\n        {\n            _name = value;\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Name)));\n        }\n    }\n\n    // Other properties are defined similar codes.\n}\n\n\n\n\nAnd those properties binds in the XAML code.\n\n\n<!-- In the WPF -->\n<TextBox Text=\"{Binding Name}\" />\n\n<!-- In the UWP(Runtime data binding) -->\n<TextBox Text=\"{Binding Name}\" />\n\n<!-- In the UWP(Compile time data binding) -->\n<TextBox Text=\"{x:Bind ViewModel.Name, Mode=TwoWay}\" />\n\n<!-- In the Xamarin.Forms -->\n<Entry Text=\"{Binding Name}\" />\n\n\n\n\nIn the case that uses the ReactiveProperty, The ViewModel code becomes very simple!\n\n\n// The INotifyPropertyChanged interface must implement when using the WPF.\n// Because, if you don't implement this, then memory leak occurred.\npublic class MainPageViewModel\n{\n    public ReactiveProperty<string> Name { get; } = new ReactiveProperty<string>();\n\n    // Other properties are defined similar codes.\n}\n\n\n\n\nWhen binding in the XAML code, you must add the \n.Value\n in the binding path.\nThis is an only limitation of this library.\n\n\n<!-- In the WPF -->\n<TextBox Text=\"{Binding Name.Value}\" />\n\n<!-- In the UWP(Runtime data binding) -->\n<TextBox Text=\"{Binding Name}.Value\" />\n\n<!-- In the UWP(Compile time data binding) -->\n<TextBox Text=\"{x:Bind ViewModel.Name.Value, Mode=TwoWay}\" />\n\n<!-- In the Xamarin.Forms -->\n<Entry Text=\"{Binding Name.Value}\" />\n\n\n\n\n\n\nWe forget the \n.Value\n sometimes. If you have a ReSharper license, then you can use this plugin.\n\nReactiveProperty XAML Binding Corrector\n\nHighlight the missing of ReactiveProperty \".Value\" in XAML.\n\n\n\n\nHow to create a ReactiveProperty instance\n\n\nThe ReactiveProperty class can create from many methods.\n\n\nCreate from the constructor\n\n\nThe most simplest way is that using the constructor.\n\n\n// create with the default value.\nvar name = new ReactiveProperty<string>();\nConsole.WriteLine(name.Value); // -> empty output\n\n// create with the initial value.\nvar name = new ReactiveProperty<string>(\"okazuki\");\nConsole.WriteLine(name.Value); // -> okazuki\n\n\n\n\nCreate from the IObservable<T>\n\n\nThis can create from the IObservable<T>.\nJust calls the \nToReactiveProperty\n method.\n\n\nIObservable<long> observableInstance = Observable.Interval(TimeSpan.FromSeconds(1));\n\n// Convert to ReactiveProperty from IObservable.\nReactiveProperty<long> counter = observableInstance.ToReactiveProperty();\n\n\n\n\nCreate from the ReactiveProperty\n\n\nThe ReactiveProperty implements the IObservable interface.\nIt means that a ReactiveProperty can be created from ReactiveProperty.\n\n\nvar name = new ReactiveProperty<string>(\"\");\n\nvar formalName = name.Select(x => $\"Dear {x}\")\n    .ToReactiveProperty();\n\n\n\n\nAll IObservable instances can become a ReactiveProperty. \n\n\nValidation\n\n\nThe ReactiveProperty class implements the INotifyDataErrorInfo interface.\nYou can set the custom validation logic using the SetValidateNotifyError method.\n\n\nvar name = new ReactiveProperty<string>()\n    .SetValidateNotifyError(x => string.IsNullOrWhiteSpace(x) ? \"Error message\" : null);\n\n\n\n\nIn the valid value case, the validation logic should return null.\nIn the invalid value case, the logic should return a error message.\n\n\nValidation with the System.Components.DataAnnotations\n\n\nThis class can integrate with the DataAnnotations.\nYou can set the validation attribute using the SetValidateAttribute method.\n\n\nclass ViewModel\n{\n    // Set validation attributes\n    [Required(ErrorMessage = \"The name is required.\")]\n    [StringLength(100, ErrorMessage = \"The name length should be lower than 30.\")]\n    public ReactiveProperty<string> Name { get; }\n\n    public ViewModel()\n    {\n        Name = new ReactiveProperty<string>()\n            // Set validation attributes into the ReactiveProperty.\n            .SetValidateAttribute(() => Name);\n    }\n}",
            "title": "ReactiveProperty class"
        },
        {
            "location": "/features/ReactivePropertyClass/#reactiveproperty-class",
            "text": "ReactiveProperty is core class of this library.\nThis has following features.   Implements the INotifyPropretyChanged interface.  The value property raise the PropertyChanged event.    Implements the IObservable<T> interface.   Yes, The value property can bind to XAML control's property.\nAnd the class call the IObserver<T>#OnNext method when set the value.  A sample code is below.  using Reactive.Bindings;\nusing System;\n\nnamespace ReactivePropertyEduApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // create from defualt constructor(default value is null)\n            var name = new ReactiveProperty<string>();\n            // setup the event handler and the onNext callback.\n            name.PropertyChanged += (_, e) => Console.WriteLine($\"PropertyChanged: {e.PropertyName}\");\n            name.Subscribe(x => Console.WriteLine($\"OnNext: {x}\"));\n\n            // update the value property.\n            name.Value = \"neuecc\";\n            name.Value = \"xin9le\";\n            name.Value = \"okazuki\";\n        }\n    }\n}  The output of this program is below.  OnNext:\nOnNext: neuecc\nPropertyChanged: Value\nOnNext: xin9le\nPropertyChanged: Value\nOnNext: okazuki\nPropertyChanged: Value  What's deferent between PropertyChanged and onNext callback?\nThe onNext is called when subscribe. The PropertyChanged isn't called when added the event handler. And the onNext callback's argument is the property value, the PropertyChanged argument don't have the property value.  The PropertyChanged event was provided for the data binding. In the normal case, you should use the Reactive Extensions methods.",
            "title": "ReactiveProperty class"
        },
        {
            "location": "/features/ReactivePropertyClass/#use-with-the-xaml-platform",
            "text": "The ReactiveProperty class is designed for the XAML platform which is like WPF, UWP, and Xamarin.Forms.\nThis class can be used the ViewModel layer.   In the case that don't use the ReactiveProperty, the ViewModel class wrote the below.   public class MainPageViewModel : INotifyPropertyChanged\n{\n    public event PropertyChangedEventHandler PropertyChanged;\n\n    private string _name;\n    public string Name\n    {\n        get => _name;\n        set\n        {\n            _name = value;\n            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(nameof(Name)));\n        }\n    }\n\n    // Other properties are defined similar codes.\n}  And those properties binds in the XAML code.  <!-- In the WPF -->\n<TextBox Text=\"{Binding Name}\" />\n\n<!-- In the UWP(Runtime data binding) -->\n<TextBox Text=\"{Binding Name}\" />\n\n<!-- In the UWP(Compile time data binding) -->\n<TextBox Text=\"{x:Bind ViewModel.Name, Mode=TwoWay}\" />\n\n<!-- In the Xamarin.Forms -->\n<Entry Text=\"{Binding Name}\" />  In the case that uses the ReactiveProperty, The ViewModel code becomes very simple!  // The INotifyPropertyChanged interface must implement when using the WPF.\n// Because, if you don't implement this, then memory leak occurred.\npublic class MainPageViewModel\n{\n    public ReactiveProperty<string> Name { get; } = new ReactiveProperty<string>();\n\n    // Other properties are defined similar codes.\n}  When binding in the XAML code, you must add the  .Value  in the binding path.\nThis is an only limitation of this library.  <!-- In the WPF -->\n<TextBox Text=\"{Binding Name.Value}\" />\n\n<!-- In the UWP(Runtime data binding) -->\n<TextBox Text=\"{Binding Name}.Value\" />\n\n<!-- In the UWP(Compile time data binding) -->\n<TextBox Text=\"{x:Bind ViewModel.Name.Value, Mode=TwoWay}\" />\n\n<!-- In the Xamarin.Forms -->\n<Entry Text=\"{Binding Name.Value}\" />   We forget the  .Value  sometimes. If you have a ReSharper license, then you can use this plugin. ReactiveProperty XAML Binding Corrector \nHighlight the missing of ReactiveProperty \".Value\" in XAML.",
            "title": "Use with the XAML platform"
        },
        {
            "location": "/features/ReactivePropertyClass/#how-to-create-a-reactiveproperty-instance",
            "text": "The ReactiveProperty class can create from many methods.",
            "title": "How to create a ReactiveProperty instance"
        },
        {
            "location": "/features/ReactivePropertyClass/#create-from-the-constructor",
            "text": "The most simplest way is that using the constructor.  // create with the default value.\nvar name = new ReactiveProperty<string>();\nConsole.WriteLine(name.Value); // -> empty output\n\n// create with the initial value.\nvar name = new ReactiveProperty<string>(\"okazuki\");\nConsole.WriteLine(name.Value); // -> okazuki",
            "title": "Create from the constructor"
        },
        {
            "location": "/features/ReactivePropertyClass/#create-from-the-iobservablet",
            "text": "This can create from the IObservable<T>.\nJust calls the  ToReactiveProperty  method.  IObservable<long> observableInstance = Observable.Interval(TimeSpan.FromSeconds(1));\n\n// Convert to ReactiveProperty from IObservable.\nReactiveProperty<long> counter = observableInstance.ToReactiveProperty();",
            "title": "Create from the IObservable&lt;T&gt;"
        },
        {
            "location": "/features/ReactivePropertyClass/#create-from-the-reactiveproperty",
            "text": "The ReactiveProperty implements the IObservable interface.\nIt means that a ReactiveProperty can be created from ReactiveProperty.  var name = new ReactiveProperty<string>(\"\");\n\nvar formalName = name.Select(x => $\"Dear {x}\")\n    .ToReactiveProperty();  All IObservable instances can become a ReactiveProperty.",
            "title": "Create from the ReactiveProperty"
        },
        {
            "location": "/features/ReactivePropertyClass/#validation",
            "text": "The ReactiveProperty class implements the INotifyDataErrorInfo interface.\nYou can set the custom validation logic using the SetValidateNotifyError method.  var name = new ReactiveProperty<string>()\n    .SetValidateNotifyError(x => string.IsNullOrWhiteSpace(x) ? \"Error message\" : null);  In the valid value case, the validation logic should return null.\nIn the invalid value case, the logic should return a error message.",
            "title": "Validation"
        },
        {
            "location": "/features/ReactivePropertyClass/#validation-with-the-systemcomponentsdataannotations",
            "text": "This class can integrate with the DataAnnotations.\nYou can set the validation attribute using the SetValidateAttribute method.  class ViewModel\n{\n    // Set validation attributes\n    [Required(ErrorMessage = \"The name is required.\")]\n    [StringLength(100, ErrorMessage = \"The name length should be lower than 30.\")]\n    public ReactiveProperty<string> Name { get; }\n\n    public ViewModel()\n    {\n        Name = new ReactiveProperty<string>()\n            // Set validation attributes into the ReactiveProperty.\n            .SetValidateAttribute(() => Name);\n    }\n}",
            "title": "Validation with the System.Components.DataAnnotations"
        },
        {
            "location": "/getting-started/uwp/",
            "text": "UWP\n\n\nCreate a project\n\n\n\n\n\n\nCreate a Blank App (Universal Windows) project.\n\n\n\n\nSet a \nTarget version\n item to Windows 10 Fall Creators Update (1.0.: Build 16299) and \nMinimum version\n item to the same.\n\n\n\n\n\n\nThe ReactiveProperty target the .NET Standard 1.3. You can use this library with the another version UWP. My recomended version is after the Createors Update. After this version can use compile time binding.\n\n\n\n\n\n\nInstall the ReactiveProperty package from NuGet.\n\n\n\n\n\n\nEdit codes\n\n\n\n\nCreate a MainPageViewModel.cs file.\n\n\nEdit files like following.\n\n\n\n\nMainPageViewModel.cs\n\n\nusing Reactive.Bindings;\nusing System;\nusing System.Linq;\nusing System.Reactive.Linq;\n\nnamespace GettingStartedUWP\n{\n    public class MainPageViewModel\n    {\n        public ReactiveProperty<string> Input { get; }\n        public ReadOnlyReactiveProperty<string> Output { get; }\n\n        public MainPageViewModel()\n        {\n            Input = new ReactiveProperty<string>(\"\");\n            Output = Input\n                .Delay(TimeSpan.FromSeconds(1))\n                .Select(x => x.ToUpper())\n                .ToReadOnlyReactiveProperty();\n        }\n    }\n}\n\n\n\n\nMainPage.xaml.cs\n\n\nusing Windows.UI.Xaml.Controls;\n\n// The Blank Page item template is documented at https://go.microsoft.com/fwlink/?LinkId=402352&clcid=0x409\n\nnamespace GettingStartedUWP\n{\n    /// <summary>\n    /// An empty page that can be used on its own or navigated to within a Frame.\n    /// </summary>\n    public sealed partial class MainPage : Page\n    {\n        private MainPageViewModel ViewModel { get; } = new MainPageViewModel();\n        public MainPage()\n        {\n            this.InitializeComponent();\n        }\n    }\n}\n\n\n\n\nMainPage.xaml\n\n\n<Page x:Class=\"GettingStartedUWP.MainPage\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:local=\"using:GettingStartedUWP\"\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n    mc:Ignorable=\"d\">\n\n    <StackPanel Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <TextBlock Text=\"Input\"\n                Style=\"{StaticResource CaptionTextBlockStyle}\" />\n        <TextBox Text=\"{x:Bind ViewModel.Input.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}\"\n                Margin=\"5\" />\n        <TextBlock Text=\"Output\"\n                Style=\"{StaticResource CaptionTextBlockStyle}\" />\n        <TextBlock Text=\"{x:Bind ViewModel.Output.Value, Mode=OneWay}\"\n                Style=\"{StaticResource BodyTextBlockStyle}\"\n                Margin=\"5\" />\n    </StackPanel>\n</Page>\n\n\n\n\nLaunch the application\n\n\nAfter launch the app, You can see the below window.\nThe output value was displayed to upper case, after 1sec from the input.",
            "title": "UWP"
        },
        {
            "location": "/getting-started/uwp/#uwp",
            "text": "",
            "title": "UWP"
        },
        {
            "location": "/getting-started/uwp/#create-a-project",
            "text": "Create a Blank App (Universal Windows) project.   Set a  Target version  item to Windows 10 Fall Creators Update (1.0.: Build 16299) and  Minimum version  item to the same.    The ReactiveProperty target the .NET Standard 1.3. You can use this library with the another version UWP. My recomended version is after the Createors Update. After this version can use compile time binding.    Install the ReactiveProperty package from NuGet.",
            "title": "Create a project"
        },
        {
            "location": "/getting-started/uwp/#edit-codes",
            "text": "Create a MainPageViewModel.cs file.  Edit files like following.   MainPageViewModel.cs  using Reactive.Bindings;\nusing System;\nusing System.Linq;\nusing System.Reactive.Linq;\n\nnamespace GettingStartedUWP\n{\n    public class MainPageViewModel\n    {\n        public ReactiveProperty<string> Input { get; }\n        public ReadOnlyReactiveProperty<string> Output { get; }\n\n        public MainPageViewModel()\n        {\n            Input = new ReactiveProperty<string>(\"\");\n            Output = Input\n                .Delay(TimeSpan.FromSeconds(1))\n                .Select(x => x.ToUpper())\n                .ToReadOnlyReactiveProperty();\n        }\n    }\n}  MainPage.xaml.cs  using Windows.UI.Xaml.Controls;\n\n// The Blank Page item template is documented at https://go.microsoft.com/fwlink/?LinkId=402352&clcid=0x409\n\nnamespace GettingStartedUWP\n{\n    /// <summary>\n    /// An empty page that can be used on its own or navigated to within a Frame.\n    /// </summary>\n    public sealed partial class MainPage : Page\n    {\n        private MainPageViewModel ViewModel { get; } = new MainPageViewModel();\n        public MainPage()\n        {\n            this.InitializeComponent();\n        }\n    }\n}  MainPage.xaml  <Page x:Class=\"GettingStartedUWP.MainPage\"\n    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n    xmlns:local=\"using:GettingStartedUWP\"\n    xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n    mc:Ignorable=\"d\">\n\n    <StackPanel Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\">\n        <TextBlock Text=\"Input\"\n                Style=\"{StaticResource CaptionTextBlockStyle}\" />\n        <TextBox Text=\"{x:Bind ViewModel.Input.Value, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}\"\n                Margin=\"5\" />\n        <TextBlock Text=\"Output\"\n                Style=\"{StaticResource CaptionTextBlockStyle}\" />\n        <TextBlock Text=\"{x:Bind ViewModel.Output.Value, Mode=OneWay}\"\n                Style=\"{StaticResource BodyTextBlockStyle}\"\n                Margin=\"5\" />\n    </StackPanel>\n</Page>",
            "title": "Edit codes"
        },
        {
            "location": "/getting-started/uwp/#launch-the-application",
            "text": "After launch the app, You can see the below window.\nThe output value was displayed to upper case, after 1sec from the input.",
            "title": "Launch the application"
        },
        {
            "location": "/getting-started/wpf/",
            "text": "WPF\n\n\nCreate a project\n\n\n\n\nCreate a WPF App (.NET Framework) project.\n\n\nInstall the ReactiveProperty from NuGet.\n\n\n\n\nEdit codes\n\n\n\n\nCreate a MainWindowViewModel.cs file.\n\n\nEdit files like following.\n\n\n\n\nMainWindowViewModel.cs\n\n\nusing Reactive.Bindings;\nusing System;\nusing System.ComponentModel;\nusing System.Linq;\nusing System.Reactive.Linq;\n\nnamespace WpfApp1\n{\n    class MainWindowViewModel : INotifyPropertyChanged\n    {\n        public event PropertyChangedEventHandler PropertyChanged;\n\n        public ReactiveProperty<string> Input { get; }\n        public ReadOnlyReactiveProperty<string> Output { get; }\n\n        public MainWindowViewModel()\n        {\n            Input = new ReactiveProperty<string>(\"\");\n            Output = Input\n                .Delay(TimeSpan.FromSeconds(1))\n                .Select(x => x.ToUpper())\n                .ToReadOnlyReactiveProperty();\n        }\n    }\n}\n\n\n\n\nMainWindow.xaml\n\n\n<Window x:Class=\"WpfApp1.MainWindow\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n        xmlns:local=\"clr-namespace:WpfApp1\"\n        mc:Ignorable=\"d\"\n        Title=\"MainWindow\"\n        Height=\"350\"\n        Width=\"525\">\n    <Window.DataContext>\n        <local:MainWindowViewModel />\n    </Window.DataContext>\n    <StackPanel>\n        <Label Content=\"Input\" />\n        <TextBox Text=\"{Binding Input.Value, UpdateSourceTrigger=PropertyChanged}\"\n                 Margin=\"5\" />\n        <Label Content=\"Output\" />\n        <TextBlock Text=\"{Binding Output.Value}\"\n                   Margin=\"5\" />\n    </StackPanel>\n</Window>\n\n\n\n\nLaunch the application.\n\n\nAfter launch the app, You can see the below window.\nThe output value was displayed to upper case, after 1sec from the input.",
            "title": "WPF"
        },
        {
            "location": "/getting-started/wpf/#wpf",
            "text": "",
            "title": "WPF"
        },
        {
            "location": "/getting-started/wpf/#create-a-project",
            "text": "Create a WPF App (.NET Framework) project.  Install the ReactiveProperty from NuGet.",
            "title": "Create a project"
        },
        {
            "location": "/getting-started/wpf/#edit-codes",
            "text": "Create a MainWindowViewModel.cs file.  Edit files like following.   MainWindowViewModel.cs  using Reactive.Bindings;\nusing System;\nusing System.ComponentModel;\nusing System.Linq;\nusing System.Reactive.Linq;\n\nnamespace WpfApp1\n{\n    class MainWindowViewModel : INotifyPropertyChanged\n    {\n        public event PropertyChangedEventHandler PropertyChanged;\n\n        public ReactiveProperty<string> Input { get; }\n        public ReadOnlyReactiveProperty<string> Output { get; }\n\n        public MainWindowViewModel()\n        {\n            Input = new ReactiveProperty<string>(\"\");\n            Output = Input\n                .Delay(TimeSpan.FromSeconds(1))\n                .Select(x => x.ToUpper())\n                .ToReadOnlyReactiveProperty();\n        }\n    }\n}  MainWindow.xaml  <Window x:Class=\"WpfApp1.MainWindow\"\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:d=\"http://schemas.microsoft.com/expression/blend/2008\"\n        xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n        xmlns:local=\"clr-namespace:WpfApp1\"\n        mc:Ignorable=\"d\"\n        Title=\"MainWindow\"\n        Height=\"350\"\n        Width=\"525\">\n    <Window.DataContext>\n        <local:MainWindowViewModel />\n    </Window.DataContext>\n    <StackPanel>\n        <Label Content=\"Input\" />\n        <TextBox Text=\"{Binding Input.Value, UpdateSourceTrigger=PropertyChanged}\"\n                 Margin=\"5\" />\n        <Label Content=\"Output\" />\n        <TextBlock Text=\"{Binding Output.Value}\"\n                   Margin=\"5\" />\n    </StackPanel>\n</Window>",
            "title": "Edit codes"
        },
        {
            "location": "/getting-started/wpf/#launch-the-application",
            "text": "After launch the app, You can see the below window.\nThe output value was displayed to upper case, after 1sec from the input.",
            "title": "Launch the application."
        },
        {
            "location": "/getting-started/xamarin-forms/",
            "text": "Xamarin.Forms\n\n\nCreate a project\n\n\n\n\nCreate a Cross Platform app (Xamarin.Forms) project.\n\n\nSetting the \nNew Cross Platform App\n dialog like following.\n  Choice the .NET Standard project. Of couse you can select shared project.\n  \n\n\nInstall the ReactiveProperty to all projects from NGet.\n\n\n\n\nEdit codes\n\n\nTBD",
            "title": "Xamarin.Forms"
        },
        {
            "location": "/getting-started/xamarin-forms/#xamarinforms",
            "text": "",
            "title": "Xamarin.Forms"
        },
        {
            "location": "/getting-started/xamarin-forms/#create-a-project",
            "text": "Create a Cross Platform app (Xamarin.Forms) project.  Setting the  New Cross Platform App  dialog like following.\n  Choice the .NET Standard project. Of couse you can select shared project.\n    Install the ReactiveProperty to all projects from NGet.",
            "title": "Create a project"
        },
        {
            "location": "/getting-started/xamarin-forms/#edit-codes",
            "text": "TBD",
            "title": "Edit codes"
        }
    ]
}